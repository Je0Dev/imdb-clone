{
    "checksum": "9db098c5dca26fce9c26f284150af37464ecfdb47e4829a8708c75380e721263",
    "data": {
    "id": "0fd14c0b-c6b4-45b0-b34f-519911a96519",
    "createdAt": 1755143594740,
    "updatedAt": 1755143600007,
    "title": " Generate tests for initialize method",
    "messages": [
        {
            "id": "6a1f2d60-f7c7-4378-bcd9-f4f99d19072c",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": " Generate tests for initialize method"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\MA$\\IdeaProjects\\imdb_clone\\src\\main\\java\\com\\papel\\imdb_clone\\controllers\\ContentController.java",
                    "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/ContentController.java",
                    "content": "package com.papel.imdb_clone.controllers;\n\nimport com.papel.imdb_clone.data.RefactoredDataManager;\nimport com.papel.imdb_clone.exceptions.ContentNotFoundException;\nimport com.papel.imdb_clone.model.Content;\nimport com.papel.imdb_clone.model.Movie;\nimport com.papel.imdb_clone.model.Series;\nimport com.papel.imdb_clone.model.Season;\nimport com.papel.imdb_clone.model.Episode;\nimport com.papel.imdb_clone.model.User;\nimport com.papel.imdb_clone.service.ContentDataLoader;\nimport com.papel.imdb_clone.service.ContentService;\nimport com.papel.imdb_clone.service.SearchService;\nimport com.papel.imdb_clone.service.SearchCacheService;\nimport com.papel.imdb_clone.service.UserService;\nimport com.papel.imdb_clone.util.AppEventBus;\nimport com.papel.imdb_clone.util.AppStateManager;\nimport com.papel.imdb_clone.util.UIUtils;\nimport javafx.application.Platform;\nimport javafx.concurrent.Task;\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * Unified controller for managing all content types (movies, series, episodes, etc.).\n * Provides a single entry point for content-related operations.\n */\npublic abstract class ContentController extends BaseController {\n    private static final Logger logger = LoggerFactory.getLogger(ContentController.class);\n\n    // Services\n    private final ContentService<Content> contentService;\n    private final RefactoredDataManager dataManager;\n    private final ContentDataLoader contentDataLoader;\n    private final SearchService searchService;\n    private final SearchCacheService searchCacheService = SearchCacheService.getInstance();\n\n    // UI Components\n    @FXML\n    private TabPane contentTabPane;\n    @FXML\n    private Tab moviesTab;\n    @FXML\n    private Tab seriesTab;\n    @FXML\n    private VBox contentContainer;\n\n    // Movie components\n    @FXML\n    private TableView<Movie> movieTableView;\n\n    // Series components\n    @FXML\n    private TableView<Series> seriesTableView;\n    @FXML\n    private TableView<Season> seasonsTableView;\n    @FXML\n    private TableView<Episode> episodesTableView;\n\n    public ContentController() {\n        this.dataManager = RefactoredDataManager.getInstance();\n        this.contentService = ContentService.getInstance(searchCacheService, Content.class);\n        this.contentDataLoader = ContentDataLoader.getInstance(dataManager);\n        this.searchService = new SearchService(dataManager, searchCacheService);\n    }\n\n    // Service initialization moved to constructor\n\n    @FXML\n    public void initialize() {\n        try {\n            setupTabs();\n            setupEventHandlers();\n            setupEventListeners();\n\n            // Initialize content data asynchronously\n            initializeContentData().thenRun(() -> {\n                // Once data is loaded, update the UI\n                Platform.runLater(this::loadInitialContent);\n            });\n\n            // Update UI based on initial auth state\n            updateUIForAuthState();\n\n            logger.info(\"ContentController initialized successfully\");\n        } catch (Exception e) {\n            logger.error(\"Error initializing ContentController: {}\", e.getMessage(), e);\n            UIUtils.showError(\"Initialization Error\", \"Failed to initialize content management\");\n        }\n    }\n\n    /**\n     * Sets up event listeners for application-wide events.\n     */\n    private void setupEventListeners() {\n        AppEventBus eventBus = AppEventBus.getInstance();\n\n        // Listen for login events\n        eventBus.subscribe(AppStateManager.EVT_USER_LOGGED_IN, (event, data) -> {\n            logger.debug(\"User logged in, updating UI\");\n            Platform.runLater(this::updateUIForAuthState);\n        });\n\n        // Listen for logout events\n        eventBus.subscribe(AppStateManager.EVT_USER_LOGGED_OUT, (event, data) -> {\n            logger.debug(\"User logged out, updating UI\");\n            Platform.runLater(this::updateUIForAuthState);\n        });\n\n        // Listen for content updates\n        eventBus.subscribe(\"CONTENT_UPDATED\", (event, data) -> {\n            logger.debug(\"Content updated, refreshing view\");\n            Platform.runLater(this::refreshContentList);\n        });\n    }\n\n    /**\n     * Initializes content data asynchronously.\n     *\n     * @return CompletableFuture that completes when content data is loaded\n     */\n    private CompletableFuture<Void> initializeContentData() {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n\n        // Show loading indicator\n        showLoadingIndicator(true);\n\n        // Run content loading in background\n        Task<Void> loadTask = new Task<>() {\n            @Override\n            protected Void call() {\n                try {\n                    contentDataLoader.initializeContentData();\n                    return null;\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Failed to load content data\", e);\n                }\n            }\n        };\n\n        // Handle task completion\n        loadTask.setOnSucceeded(e -> {\n            showLoadingIndicator(false);\n            future.complete(null);\n        });\n\n        loadTask.setOnFailed(e -> {\n            showLoadingIndicator(false);\n            Throwable ex = loadTask.getException();\n            logger.error(\"Error loading content data: {}\", ex.getMessage(), ex);\n            UIUtils.showError(\"Loading Error\", \"Failed to load content data: \" + ex.getMessage());\n            future.completeExceptionally(ex);\n        });\n\n        // Start the task in a background thread\n        new Thread(loadTask).start();\n\n        return future;\n    }\n\n    /**\n     * Shows or hides the loading indicator.\n     * @param show Whether to show the loading indicator\n     */\n    /**\n     * Updates the UI based on the current authentication state.\n     */\n    private void updateUIForAuthState() {\n        boolean isAuthenticated = UserService.getInstance(dataManager).isAuthenticated();\n\n        // Update UI elements based on authentication state\n        if (isAuthenticated) {\n            User currentUser = UserService.getInstance(dataManager).getCurrentUser();\n            logger.debug(\"Updating UI for authenticated user: {}\", currentUser.getUsername());\n\n            // Enable/disable UI components based on user role if needed\n            // Example: adminMenu.setVisible(currentUser.isAdmin());\n\n        } else {\n            logger.debug(\"Updating UI for unauthenticated user\");\n            // Reset UI for logged out state\n        }\n    }\n\n    /**\n     * Shows or hides the loading indicator.\n     *\n     * @param show Whether to show the loading indicator\n     */\nprivate void showLoadingIndicator(boolean show) {\n        if (contentContainer == null) {\n            logger.warn(\"Content container is not initialized\");\n            return;\n        }\n        \n        Platform.runLater(() -> {\n            try {\n                // Use UIUtils for consistent loading indicators\n                if (show) {\n                    UIUtils.showLoadingIndicator(contentContainer, \"Loading content...\");\n                } else {\n                    UIUtils.hideLoadingIndicator();\n                }\n            } catch (Exception e) {\n                logger.error(\"Error updating loading indicator: {}\", e.getMessage(), e);\n            }\n        });\n    }\n\n    private void setupTabs() {\n        // Set up tab change listener\n        contentTabPane.getSelectionModel().selectedItemProperty().addListener((obs, oldTab, newTab) -> {\n            if (newTab == moviesTab) {\n                loadMovies();\n            } else if (newTab == seriesTab) {\n                loadSeries();\n            }\n        });\n    }\n\n    private void loadInitialContent() {\n        // Load initial content based on the selected tab\n        if (contentTabPane.getSelectionModel().getSelectedItem() == moviesTab) {\n            loadMovies();\n        } else {\n            loadSeries();\n        }\n    }\n\n    private void loadMovies() {\n        try {\n            // Using search with empty criteria to get all movies\n            List<Movie> movies = contentService.search(new SearchCriteria())\n                    .stream()\n                    .filter(Movie.class::isInstance)\n                    .map(Movie.class::cast)\n                    .collect(Collectors.toList());\n            updateMoviesTable(movies);\n        } catch (Exception e) {\n            logger.error(\"Error loading movies: {}\", e.getMessage(), e);\n            UIUtils.showError(\"Error\", \"Failed to load movies\");\n        }\n    }\n\n    private void loadSeries() {\n        try {\n            // Using search with empty criteria to get all series\n            List<Series> seriesList = contentService.search(new SearchCriteria())\n                    .stream()\n                    .filter(Series.class::isInstance)\n                    .map(Series.class::cast)\n                    .collect(Collectors.toList());\n            updateSeriesTable(seriesList);\n        } catch (Exception e) {\n            logger.error(\"Error loading series: {}\", e.getMessage(), e);\n            UIUtils.showError(\"Error\", \"Failed to load series\");\n        }\n    }\n\n    private void updateMoviesTable(List<Movie> movies) {\n        if (movieTableView == null) {\n            logger.error(\"Movie TableView is not initialized\");\n            return;\n        }\n        \n        movieTableView.getItems().clear();\n        movieTableView.getItems().addAll(movies);\n        \n        // Setup columns if not already done\n        if (movieTableView.getColumns().isEmpty()) {\n            TableColumn<Movie, String> titleCol = new TableColumn<>(\"Title\");\n            titleCol.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\n            \n            TableColumn<Movie, Integer> yearCol = new TableColumn<>(\"Year\");\n            yearCol.setCellValueFactory(new PropertyValueFactory<>(\"releaseYear\"));\n            \n            movieTableView.getColumns().addAll(titleCol, yearCol);\n        }\n    }\n\n    private void updateSeriesTable(List<Series> seriesList) {\n        if (seriesTableView == null) {\n            logger.error(\"Series TableView is not initialized\");\n            return;\n        }\n        \n        seriesTableView.getItems().clear();\n        seriesTableView.getItems().addAll(seriesList);\n        \n        // Setup columns if not already done\n        if (seriesTableView.getColumns().isEmpty()) {\n            TableColumn<Series, String> titleCol = new TableColumn<>(\"Title\");\n            titleCol.setCellValueFactory(new PropertyValueFactory<>(\"title\"));\n            \n            TableColumn<Series, Integer> startYearCol = new TableColumn<>(\"Start Year\");\n            startYearCol.setCellValueFactory(new PropertyValueFactory<>(\"startYear\"));\n            \n            seriesTableView.getColumns().addAll(titleCol, startYearCol);\n        }\n    }\n\n    private void setupEventHandlers() {\n        // Set up event handlers for content selection\n        movieTableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {\n            if (newSelection != null) {\n                showMovieDetails(newSelection);\n            }\n        });\n\n        seriesTableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {\n            if (newSelection != null) {\n                showSeriesDetails(newSelection);\n            }\n        });\n    }\n\n    @FXML\n    private void showAddMovieDialog() {\n        try {\n            // Create a dialog\n            Dialog<Movie> dialog = new Dialog<>();\n            dialog.setTitle(\"Add New Movie\");\n            dialog.setHeaderText(\"Enter movie details\");\n\n            // Set the button types\n            ButtonType addButton = new ButtonType(\"Add\", ButtonBar.ButtonData.OK_DONE);\n            dialog.getDialogPane().getButtonTypes().addAll(addButton, ButtonType.CANCEL);\n\n            // Create form fields\n            GridPane grid = new GridPane();\n            grid.setHgap(10);\n            grid.setVgap(10);\n            grid.setPadding(new Insets(20, 150, 10, 10));\n\n            TextField titleField = new TextField();\n            TextArea descriptionField = new TextArea();\n            TextField releaseYearField = new TextField();\n            TextField durationField = new TextField();\n            TextField directorField = new TextField();\n            TextField genresField = new TextField();\n\n            grid.add(new Label(\"Title:\"), 0, 0);\n            grid.add(titleField, 1, 0);\n            grid.add(new Label(\"Description:\"), 0, 1);\n            grid.add(descriptionField, 1, 1);\n            grid.add(new Label(\"Release Year:\"), 0, 2);\n            grid.add(releaseYearField, 1, 2);\n            grid.add(new Label(\"Duration (minutes):\"), 0, 3);\n            grid.add(durationField, 1, 3);\n            grid.add(new Label(\"Director:\"), 0, 4);\n            grid.add(directorField, 1, 4);\n            grid.add(new Label(\"Genres (comma-separated):\"), 0, 5);\n            grid.add(genresField, 1, 5);\n\n            dialog.getDialogPane().setContent(grid);\n\n            // Request focus on the title field by default\n            Platform.runLater(titleField::requestFocus);\n\n            // Convert the result to a Movie object when the add button is clicked\n            dialog.setResultConverter(dialogButton -> {\n                if (dialogButton == addButton) {\n                    try {\n                        Movie movie = new Movie();\n                        movie.setTitle(titleField.getText().trim());\n                        movie.setDescription(descriptionField.getText().trim());\n                        movie.setReleaseYear(Integer.parseInt(releaseYearField.getText().trim()));\n                        movie.setDuration(Integer.parseInt(durationField.getText().trim()));\n                        movie.setDirector(directorField.getText().trim());\n\n                        // Parse genres (comma-separated)\n                        String[] genreArray = genresField.getText().split(\",\");\n                        for (String genre : genreArray) {\n                            String genreName = genre.trim();\n                            if (!genreName.isEmpty()) {\n                                movie.addGenre(genreName);\n                            }\n                        }\n\n                        return movie;\n                    } catch (NumberFormatException e) {\n                        showError(\"Invalid Input\", \"Please enter valid numbers for year and duration.\");\n                        return null;\n                    } catch (Exception e) {\n                        showError(\"Error\", \"Failed to create movie: \" + e.getMessage());\n                        return null;\n                    }\n                }\n                return null;\n            });\n\n            Optional<Movie> result = dialog.showAndWait();\n            result.ifPresent(movie -> {\n                addContent(movie);\n                showSuccess(\"Success\", \"Movie added successfully!\");\n            });\n\n        } catch (Exception e) {\n            logger.error(\"Error showing add movie dialog: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show add movie dialog: \" + e.getMessage());\n        }\n    }\n\n    private void showMovieDetails(Movie movie) {\n        try {\n            Dialog<Void> dialog = new Dialog<>();\n            dialog.setTitle(\"Movie Details\");\n            dialog.setHeaderText(movie.getTitle());\n\n            // Set the button type\n            dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);\n\n            // Create details view\n            VBox content = new VBox(10);\n            content.setPadding(new Insets(20));\n\n            Label yearLabel = new Label(\"Year: \" + movie.getReleaseYear());\n            Label durationLabel = new Label(\"Duration: \" + movie.getDuration() + \" minutes\");\n            \n            // Handle potentially null fields\n            String description = movie.getDescription() != null ? movie.getDescription() : \"No description available\";\n            Label descriptionLabel = new Label(\"Description: \" + description);\n\n            descriptionLabel.setWrapText(true);\n            descriptionLabel.setMaxWidth(400);\n\n            content.getChildren().addAll(yearLabel, durationLabel, descriptionLabel);\n            \n            // Add genres if available\n            try {\n                if (movie.getGenres() != null && !movie.getGenres().isEmpty()) {\n                    Label genresLabel = new Label(\"Genres: \" + String.join(\", \", movie.getGenres()));\n                    content.getChildren().add(genresLabel);\n                }\n            } catch (Exception e) {\n                logger.warn(\"Error displaying genres: {}\", e.getMessage());\n            }\n\n            dialog.getDialogPane().setContent(content);\n            dialog.showAndWait();\n        } catch (Exception e) {\n            logger.error(\"Error showing movie details: {}\", e.getMessage(), e);\n            UIUtils.showError(\"Error\", \"Failed to show movie details\");\n        }\n\n            // Add genres if available\n            if (movie.getGenres() != null && !movie.getGenres().isEmpty()) {\n                Label genresLabel = new Label(\"Genres: \" + String.join(\", \", movie.getGenres()));\n                content.getChildren().add(genresLabel);\n            }\n\n            dialog.getDialogPane().setContent(content);\n            dialog.showAndWait();\n        } catch (Exception e) {\n            logger.error(\"Error showing movie details: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show movie details: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void showRatingDialog() {\n        try {\n            // Get the selected movie\n            Movie selectedMovie = movieTableView.getSelectionModel().getSelectedItem();\n            if (selectedMovie == null) {\n                showWarning(\"No Selection\", \"Please select a movie to rate.\");\n                return;\n            }\n\n            // Create the rating dialog\n            Dialog<Rating> dialog = new Dialog<>();\n            dialog.setTitle(\"Rate Movie\");\n            dialog.setHeaderText(\"Rate: \" + selectedMovie.getTitle());\n\n            // Set the button types\n            ButtonType rateButton = new ButtonType(\"Rate\", ButtonBar.ButtonData.OK_DONE);\n            dialog.getDialogPane().getButtonTypes().addAll(rateButton, ButtonType.CANCEL);\n\n            // Create the rating control\n            RatingControl ratingControl = new RatingControl();\n            ratingControl.setRating(0);\n            ratingControl.setMax(10);\n\n            // Add a text area for review (optional)\n            TextArea reviewArea = new TextArea();\n            reviewArea.setPromptText(\"Write your review here (optional)\");\n            reviewArea.setWrapText(true);\n            reviewArea.setPrefRowCount(4);\n\n            VBox content = new VBox(10);\n            content.setPadding(new Insets(20));\n            content.getChildren().addAll(\n                    new Label(\"Your Rating:\"),\n                    ratingControl,\n                    new Label(\"Your Review (optional):\"),\n                    reviewArea\n            );\n\n            dialog.getDialogPane().setContent(content);\n\n            // Request focus on the rating control by default\n            Platform.runLater(ratingControl::requestFocus);\n\n            // Convert the result to a Rating object when the rate button is clicked\n            dialog.setResultConverter(dialogButton -> {\n                if (dialogButton == rateButton) {\n                    try {\n                        Rating rating = new Rating();\n                        rating.setContentId(selectedMovie.getId());\n                        rating.setScore(ratingControl.getRating());\n                        rating.setReview(reviewArea.getText().trim());\n                        rating.setUserId(UserService.getInstance(dataManager).getCurrentUser().getId());\n                        rating.setCreatedAt(java.time.LocalDateTime.now());\n                        return rating;\n                    } catch (Exception e) {\n                        showError(\"Error\", \"Failed to create rating: \" + e.getMessage());\n                        return null;\n                    }\n                }\n                return null;\n            });\n\n            Optional<Rating> result = dialog.showAndWait();\n            result.ifPresent(rating -> {\n                try {\n                    // Save the rating\n                    contentService.saveRating(rating);\n                    showSuccess(\"Success\", \"Thank you for your rating!\");\n\n                    // Refresh the movie details to show the updated rating\n                    if (movieTableView.getSelectionModel().getSelectedItem() != null) {\n                        showMovieDetails(movieTableView.getSelectionModel().getSelectedItem());\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Error saving rating: {}\", e.getMessage(), e);\n                    showError(\"Error\", \"Failed to save rating: \" + e.getMessage());\n                }\n            });\n\n        } catch (Exception e) {\n            logger.error(\"Error showing rating dialog: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show rating dialog: \" + e.getMessage());\n        }\n    }\n\n    private void showSeriesDetails(Series series) {\n        // Show series details including seasons and episodes\n        try {\n            Dialog<Void> dialog = new Dialog<>();\n            dialog.setTitle(\"Series Details\");\n            dialog.setHeaderText(series.getTitle());\n\n            // Set the button type\n            dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);\n\n            // Create details view\n            VBox content = new VBox(10);\n            content.setPadding(new Insets(20));\n\n            Label yearLabel = new Label(\"Year: \" + series.getReleaseYear());\n            Label seasonsLabel = new Label(\"Seasons: \" + series.getSeasons().size());\n            Label descriptionLabel = new Label(\"Description: \" + series.getDescription());\n\n            descriptionLabel.setWrapText(true);\n            descriptionLabel.setMaxWidth(400);\n\n            // Create a list view for seasons and episodes\n            TreeView<String> seasonsTree = new TreeView<>();\n            TreeItem<String> rootItem = new TreeItem<>(\"Seasons\");\n\n            for (Season season : series.getSeasons()) {\n                TreeItem<String> seasonItem = new TreeItem<>(\"Season \" + season.getSeasonNumber());\n\n                for (Episode episode : season.getEpisodes()) {\n                    TreeItem<String> episodeItem = new TreeItem<>(\n                            String.format(\"Episode %d: %s\",\n                                    episode.getEpisodeNumber(),\n                                    episode.getTitle())\n                    );\n                    seasonItem.getChildren().add(episodeItem);\n                }\n\n                rootItem.getChildren().add(seasonItem);\n            }\n\n            seasonsTree.setRoot(rootItem);\n            seasonsTree.setShowRoot(false);\n\n            // Add all components to the content\n            content.getChildren().addAll(yearLabel, descriptionLabel, seasonsLabel, new Label(\"\\nEpisodes:\"), seasonsTree);\n\n            dialog.getDialogPane().setContent(content);\n            dialog.showAndWait();\n\n        } catch (Exception e) {\n            logger.error(\"Error showing series details: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show series details: \" + e.getMessage());\n        }\n    }\n\n    // Content management methods\n    public void addContent(Content content) {\n        try {\n            contentService.saveContent(content);\n            refreshContentList();\n        } catch (Exception e) {\n            logger.error(\"Error adding content: {}\", e.getMessage(), e);\n            UIUtils.showError(\"Error\", \"Failed to add content\");\n        }\n    }\n\n    public void updateContent(Content content) {\n        try {\n            contentService.updateContent(content);\n            refreshContentList();\n        } catch (Exception e) {\n            logger.error(\"Error updating content: {}\", e.getMessage(), e);\n            UIUtils.showError(\"Error\", \"Failed to update content\");\n        }\n    }\n\n    public void deleteContent(Content content) {\n        try {\n            // Show confirmation dialog\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n            alert.setTitle(\"Confirm Deletion\");\n            alert.setHeaderText(\"Delete \" + content.getTitle() + \"?\");\n            alert.setContentText(\"Are you sure you want to delete this content? This action cannot be undone.\");\n\n            Optional<ButtonType> result = alert.showAndWait();\n            if (result.isPresent() && result.get() == ButtonType.OK) {\n                contentService.deleteContent(content);\n                refreshContentList();\n                showSuccess(\"Success\", \"Content deleted successfully!\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error deleting content: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to delete content: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handleAddSeries() {\n        try {\n            Dialog<Series> dialog = new Dialog<>();\n            dialog.setTitle(\"Add New Series\");\n            dialog.setHeaderText(\"Enter series details\");\n\n            // Set the button types\n            ButtonType addButton = new ButtonType(\"Add\", ButtonBar.ButtonData.OK_DONE);\n            dialog.getDialogPane().getButtonTypes().addAll(addButton, ButtonType.CANCEL);\n\n            // Create form fields\n            GridPane grid = new GridPane();\n            grid.setHgap(10);\n            grid.setVgap(10);\n            grid.setPadding(new Insets(20, 150, 10, 10));\n\n            TextField titleField = new TextField();\n            TextArea descriptionField = new TextArea();\n            TextField releaseYearField = new TextField();\n            TextField genresField = new TextField();\n            TextField seasonsField = new TextField(\"1\");\n\n            grid.add(new Label(\"Title:\"), 0, 0);\n            grid.add(titleField, 1, 0);\n            grid.add(new Label(\"Description:\"), 0, 1);\n            grid.add(descriptionField, 1, 1);\n            grid.add(new Label(\"Release Year:\"), 0, 2);\n            grid.add(releaseYearField, 1, 2);\n            grid.add(new Label(\"Genres (comma-separated):\"), 0, 3);\n            grid.add(genresField, 1, 3);\n            grid.add(new Label(\"Number of Seasons:\"), 0, 4);\n            grid.add(seasonsField, 1, 4);\n\n            dialog.getDialogPane().setContent(grid);\n            Platform.runLater(titleField::requestFocus);\n\n            // Convert the result to a Series object when the add button is clicked\n            dialog.setResultConverter(dialogButton -> {\n                if (dialogButton == addButton) {\n                    try {\n                        Series series = new Series();\n                        series.setTitle(titleField.getText().trim());\n                        series.setDescription(descriptionField.getText().trim());\n                        series.setReleaseYear(Integer.parseInt(releaseYearField.getText().trim()));\n\n                        // Parse genres\n                        String[] genreArray = genresField.getText().split(\",\");\n                        for (String genre : genreArray) {\n                            String genreName = genre.trim();\n                            if (!genreName.isEmpty()) {\n                                series.addGenre(genreName);\n                            }\n                        }\n\n                        // Create seasons\n                        int numSeasons = Integer.parseInt(seasonsField.getText().trim());\n                        for (int i = 1; i <= numSeasons; i++) {\n                            Season season = new Season();\n                            season.setSeasonNumber(i);\n                            season.setSeries(series);\n                            series.addSeason(season);\n                        }\n\n                        return series;\n                    } catch (NumberFormatException e) {\n                        showError(\"Invalid Input\", \"Please enter valid numbers for year and seasons.\");\n                        return null;\n                    } catch (Exception e) {\n                        showError(\"Error\", \"Failed to create series: \" + e.getMessage());\n                        return null;\n                    }\n                }\n                return null;\n            });\n\n            Optional<Series> result = dialog.showAndWait();\n            result.ifPresent(series -> {\n                addContent(series);\n                showSuccess(\"Success\", \"Series added successfully!\");\n            });\n\n        } catch (Exception e) {\n            logger.error(\"Error showing add series dialog: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show add series dialog: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handleEditSeries() {\n        Series selectedSeries = seriesTableView.getSelectionModel().getSelectedItem();\n        if (selectedSeries == null) {\n            showWarning(\"No Selection\", \"Please select a series to edit.\");\n            return;\n        }\n\n        try {\n            Dialog<Series> dialog = new Dialog<>();\n            dialog.setTitle(\"Edit Series\");\n            dialog.setHeaderText(\"Edit series details\");\n\n            // Set the button types\n            ButtonType saveButton = new ButtonType(\"Save\", ButtonBar.ButtonData.OK_DONE);\n            dialog.getDialogPane().getButtonTypes().addAll(saveButton, ButtonType.CANCEL);\n\n            // Create form fields with existing data\n            TextField titleField = new TextField(selectedSeries.getTitle());\n            TextArea descriptionField = new TextArea(selectedSeries.getDescription());\n            TextField releaseYearField = new TextField(String.valueOf(selectedSeries.getReleaseYear()));\n            TextField genresField = new TextField(String.join(\", \", selectedSeries.getGenres()));\n\n            GridPane grid = new GridPane();\n            grid.setHgap(10);\n            grid.setVgap(10);\n            grid.setPadding(new Insets(20, 150, 10, 10));\n\n            grid.add(new Label(\"Title:\"), 0, 0);\n            grid.add(titleField, 1, 0);\n            grid.add(new Label(\"Description:\"), 0, 1);\n            grid.add(descriptionField, 1, 1);\n            grid.add(new Label(\"Release Year:\"), 0, 2);\n            grid.add(releaseYearField, 1, 2);\n            grid.add(new Label(\"Genres (comma-separated):\"), 0, 3);\n            grid.add(genresField, 1, 3);\n\n            dialog.getDialogPane().setContent(grid);\n            Platform.runLater(titleField::requestFocus);\n\n            // Convert the result to an updated Series object when save is clicked\n            dialog.setResultConverter(dialogButton -> {\n                if (dialogButton == saveButton) {\n                    try {\n                        selectedSeries.setTitle(titleField.getText().trim());\n                        selectedSeries.setDescription(descriptionField.getText().trim());\n                        selectedSeries.setReleaseYear(Integer.parseInt(releaseYearField.getText().trim()));\n\n                        // Update genres\n                        selectedSeries.getGenres().clear();\n                        String[] genreArray = genresField.getText().split(\",\");\n                        for (String genre : genreArray) {\n                            String genreName = genre.trim();\n                            if (!genreName.isEmpty()) {\n                                selectedSeries.addGenre(genreName);\n                            }\n                        }\n\n                        return selectedSeries;\n                    } catch (NumberFormatException e) {\n                        showError(\"Invalid Input\", \"Please enter a valid year.\");\n                        return null;\n                    } catch (Exception e) {\n                        showError(\"Error\", \"Failed to update series: \" + e.getMessage());\n                        return null;\n                    }\n                }\n                return null;\n            });\n\n            Optional<Series> result = dialog.showAndWait();\n            result.ifPresent(series -> {\n                updateContent(series);\n                showSuccess(\"Success\", \"Series updated successfully!\");\n            });\n\n        } catch (Exception e) {\n            logger.error(\"Error showing edit series dialog: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show edit series dialog: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handleDeleteSeries() {\n        Series selectedSeries = seriesTableView.getSelectionModel().getSelectedItem();\n        if (selectedSeries == null) {\n            showWarning(\"No Selection\", \"Please select a series to delete.\");\n            return;\n        }\n\n        try {\n            // Show confirmation dialog\n            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n            alert.setTitle(\"Confirm Deletion\");\n            alert.setHeaderText(\"Delete \" + selectedSeries.getTitle() + \"?\");\n            alert.setContentText(\"Are you sure you want to delete this series and all its seasons/episodes? This action cannot be undone.\");\n\n            Optional<ButtonType> result = alert.showAndWait();\n            if (result.isPresent() && result.get() == ButtonType.OK) {\n                deleteContent(selectedSeries);\n                showSuccess(\"Success\", \"Series deleted successfully!\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Error deleting series: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to delete series: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handleRateSeries() {\n        Series selectedSeries = seriesTableView.getSelectionModel().getSelectedItem();\n        if (selectedSeries == null) {\n            showWarning(\"No Selection\", \"Please select a series to rate.\");\n            return;\n        }\n\n        try {\n            // Create the rating dialog\n            Dialog<Rating> dialog = new Dialog<>();\n            dialog.setTitle(\"Rate Series\");\n            dialog.setHeaderText(\"Rate: \" + selectedSeries.getTitle());\n\n            // Set the button types\n            ButtonType rateButton = new ButtonType(\"Rate\", ButtonBar.ButtonData.OK_DONE);\n            dialog.getDialogPane().getButtonTypes().addAll(rateButton, ButtonType.CANCEL);\n\n            // Create the rating control\n            RatingControl ratingControl = new RatingControl();\n            ratingControl.setRating(0);\n            ratingControl.setMax(10);\n\n            // Add a text area for review (optional)\n            TextArea reviewArea = new TextArea();\n            reviewArea.setPromptText(\"Write your review here (optional)\");\n            reviewArea.setWrapText(true);\n            reviewArea.setPrefRowCount(4);\n\n            VBox content = new VBox(10);\n            content.setPadding(new Insets(20));\n            content.getChildren().addAll(\n                    new Label(\"Your Rating:\"),\n                    ratingControl,\n                    new Label(\"Your Review (optional):\"),\n                    reviewArea\n            );\n\n            dialog.getDialogPane().setContent(content);\n            Platform.runLater(ratingControl::requestFocus);\n\n            // Convert the result to a Rating object when the rate button is clicked\n            dialog.setResultConverter(dialogButton -> {\n                if (dialogButton == rateButton) {\n                    try {\n                        Rating rating = new Rating();\n                        rating.setContentId(selectedSeries.getId());\n                        rating.setScore(ratingControl.getRating());\n                        rating.setReview(reviewArea.getText().trim());\n                        rating.setUserId(UserService.getInstance(dataManager).getCurrentUser().getId());\n                        rating.setCreatedAt(java.time.LocalDateTime.now());\n                        return rating;\n                    } catch (Exception e) {\n                        showError(\"Error\", \"Failed to create rating: \" + e.getMessage());\n                        return null;\n                    }\n                }\n                return null;\n            });\n\n            Optional<Rating> result = dialog.showAndWait();\n            result.ifPresent(rating -> {\n                try {\n                    // Save the rating\n                    contentService.saveRating(rating);\n                    showSuccess(\"Success\", \"Thank you for your rating!\");\n\n                    // Refresh the series details to show the updated rating\n                    if (seriesTableView.getSelectionModel().getSelectedItem() != null) {\n                        showSeriesDetails(seriesTableView.getSelectionModel().getSelectedItem());\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Error saving rating: {}\", e.getMessage(), e);\n                    showError(\"Error\", \"Failed to save rating: \" + e.getMessage());\n                }\n            });\n\n        } catch (Exception e) {\n            logger.error(\"Error showing rating dialog: {}\", e.getMessage(), e);\n            showError(\"Error\", \"Failed to show rating dialog: \" + e.getMessage());\n        }\n    }\n\n    public void refreshContentList() {\n        // Refresh the current view\n        if (contentTabPane.getSelectionModel().getSelectedItem() == moviesTab) {\n            loadMovies();\n        } else {\n            loadSeries();\n        }\n    }\n\n    // Search functionality\n    public void searchContent(String query) {\n        if (query == null || query.trim().isEmpty()) {\n            // If search is empty, just refresh the current view\n            refreshContentList();\n            return;\n        }\n\n        // Show loading indicator\n        showLoadingIndicator(true);\n\n        // Create search criteria\n        SearchCriteria criteria = new SearchCriteria(query);\n\n        // Perform search asynchronously\n        searchService.searchAsync(criteria)\n                .thenAccept(results -> {\n                    Platform.runLater(() -> {\n                        // Update UI with search results\n                        updateSearchResults(results);\n                        showLoadingIndicator(false);\n                    });\n                })\n                .exceptionally(e -> {\n                    logger.error(\"Error performing search: {}\", e.getMessage(), e);\n                    Platform.runLater(() -> {\n                        UIUtils.showError(\"Search Error\", \"Failed to perform search: \" + e.getMessage());\n                        showLoadingIndicator(false);\n                    });\n                    return null;\n                });\n    }\n\n    /**\n     * Updates the UI with search results.\n     *\n     * @param results The search results to display\n     */\n    private void updateSearchResults(List<Content> results) {\n        if (results == null || results.isEmpty()) {\n            // Show no results message\n            UIUtils.showInfo(\"No Results\", \"No content found matching your search.\");\n            return;\n        }\n\n        // Clear current selection\n        movieTableView.getSelectionModel().clearSelection();\n        seriesTableView.getSelectionModel().clearSelection();\n\n        // Group results by type\n        Map<Class<? extends Content>, List<Content>> resultsByType = results.stream()\n                .collect(Collectors.groupingBy(Content::getClass));\n\n        // Update movies table if there are movie results\n        if (resultsByType.containsKey(Movie.class)) {\n            List<Movie> movies = resultsByType.get(Movie.class).stream()\n                    .map(m -> (Movie) m)\n                    .collect(Collectors.toList());\n            updateMoviesTable(movies);\n        }\n\n        // Update series table if there are series results\n        if (resultsByType.containsKey(Series.class)) {\n            List<Series> seriesList = resultsByType.get(Series.class).stream()\n                    .map(s -> (Series) s)\n                    .collect(Collectors.toList());\n            updateSeriesTable(seriesList);\n        }\n\n        // Switch to the appropriate tab if needed\n        if (resultsByType.containsKey(Movie.class) && !resultsByType.containsKey(Series.class)) {\n            contentTabPane.getSelectionModel().select(moviesTab);\n        } else if (resultsByType.containsKey(Series.class) && !resultsByType.containsKey(Movie.class)) {\n            contentTabPane.getSelectionModel().select(seriesTab);\n        }\n    }\n\n    // UI Helper Methods\n    private void showError(String title, String message) {\n        Platform.runLater(() -> UIUtils.showError(title, message));\n    }\n\n    private void showWarning(String title, String message) {\n        Platform.runLater(() -> UIUtils.showWarning(title, message));\n    }\n\n    private void showSuccess(String title, String message) {\n        Platform.runLater(() -> UIUtils.showInfo(title, message));\n    }\n\n    private Stage primaryStage;\n    private User currentUser;\n    private String sessionToken;\n\n    /**\n     * Sets the current user and updates the UI accordingly.\n     *\n     * @param currentUser The currently logged-in user, or null if no user is logged in\n     */\n    public void setCurrentUser(User currentUser) {\n        this.currentUser = currentUser;\n        updateUIForAuthState();\n    }\n\n    /**\n     * Sets the current session token for authenticated requests.\n     *\n     * @param sessionToken The session token, or null if no session exists\n     */\n    public void setSessionToken(String sessionToken) {\n        this.sessionToken = sessionToken;\n    }\n\n    /**\n     * Sets the primary stage for this controller.\n     * Used for showing dialogs and other UI operations.\n     *\n     * @param primaryStage The primary stage of the application\n     */\n    public void setPrimaryStage(Stage primaryStage) {\n        this.primaryStage = primaryStage;\n    }\n\n    /**\n     * Sets the data manager for this controller.\n     * This is used for accessing application data and services.\n     *\n     * @param dataManager The data manager instance\n     */\n    public void setDataManager(RefactoredDataManager dataManager) {\n        this.dataManager = dataManager;\n        // Re-initialize services with the new data manager if needed\n        if (this.dataManager != null) {\n            initializeServices();\n        }\n    }\n}\n",
                    "language": "java"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1755143594775,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": " Generate tests for initialize method"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": []
        },
        {
            "id": "20d2ad29-e48d-4f33-af20-50020ffba660",
            "role": "assistant",
            "content": [
                {
                    "type": "thought",
                    "text": "The user wants tests for the initialize method in the ContentController class. I can see from the current file that there's an initialize method at line 83 that does several things:\n1. Sets up tabs\n2. Sets up event handlers  \n3. Sets up event listeners\n4. Initializes content data asynchronously\n5. Updates UI for auth"
                }
            ],
            "context": {
                "author": "Unit test agent",
                "operationId": "f0acc047-af28-4da5-b8f6-b42a86867011"
            },
            "createdAt": 1755143600007,
            "isInternal": false
        }
    ],
    "isUnitTestsAgent": true
}
}