{
    "checksum": "9a478763a31e3904a43f487ac0b11414d912ffd4a5ae597955c61e8a883979eb",
    "data": {
    "id": "04418b2e-3191-4f7f-afe1-cb9b38999eb5",
    "createdAt": 1755189573158,
    "updatedAt": 1755189573165,
    "title": "/fix (content -> content.getYear() >= criteria....",
    "messages": [
        {
            "id": "4f28671f-e522-46da-a335-c1d76e8f0a8a",
            "role": "user",
            "content": [
                {
                    "type": "command",
                    "commandName": "fix"
                },
                {
                    "type": "codeSnippet",
                    "text": "(content -> content.getYear() >= criteria.getMinYear())",
                    "language": "java"
                },
                {
                    "type": "text",
                    "text": "Operator '>=' cannot be applied to 'java.util.Date', 'java.lang.Integer'"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\MA$\\IdeaProjects\\imdb_clone\\src\\main\\java\\com\\papel\\imdb_clone\\service\\SearchService.java",
                    "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/service/SearchService.java",
                    "content": "package com.papel.imdb_clone.service;\n\nimport com.papel.imdb_clone.data.RefactoredDataManager;\nimport com.papel.imdb_clone.data.SearchCriteria;\nimport com.papel.imdb_clone.enums.ContentType;\nimport com.papel.imdb_clone.model.Content;\nimport com.papel.imdb_clone.service.cache.SearchCacheService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n/**\n * Service for searching content with caching and filtering capabilities.\n */\npublic class SearchService {\n    private static final Logger logger = LoggerFactory.getLogger(SearchService.class);\n    private static SearchService instance;\n\n    private static SearchCache searchCache;\n    private final ContentService contentService;\n    private final ExecutorService executorService;\n    private static SearchCacheService searchCacheService;\n    private RefactoredDataManager dataManager;\n\n    /**\n     * Creates a new SearchService.\n     *\n     * @param dataManager The data manager to use for data access\n     * @param searchCache The search cache to use for caching results\n     */\n    public SearchService(RefactoredDataManager dataManager, SearchCache searchCache, SearchCacheService searchCacheService) {\n        this.searchCache = searchCache;\n        this.contentService = new ContentService(searchCacheService, Content.class);\n        this.searchCacheService = searchCacheService;\n        this.executorService = Executors.newFixedThreadPool(\n                Runtime.getRuntime().availableProcessors(),\n                r -> {\n                    Thread t = new Thread(r);\n                    t.setDaemon(true);\n                    t.setName(\"search-service-\" + t.getId());\n                    return t;\n                }\n        );\n        logger.info(\"SearchService initialized\");\n    }\n\n    /**\n     * Gets the singleton instance of SearchService.\n     *\n     * @param dataManager The data manager to use\n     * @return The SearchService instance\n     */\n    public static synchronized SearchService getInstance(RefactoredDataManager dataManager) {\n        if (instance == null) {\n            SearchCache cache = SearchCache.getInstance(1, TimeUnit.HOURS);\n            instance = new SearchService(dataManager, searchCache,searchCacheService.getInstance());\n        }\n        return instance;\n    }\n\n    /**\n     * Performs a search with the given criteria.\n     *\n     * @param criteria The search criteria\n     * @return List of matching content\n     */\n    public List<Content> search(SearchCriteria criteria) {\n        if (criteria == null || criteria.getQuery() == null || criteria.getQuery().trim().isEmpty()) {\n            logger.debug(\"Empty search query, returning empty results\");\n            return Collections.emptyList();\n        }\n\n        String query = criteria.getQuery().trim();\n        logger.debug(\"Performing search for query: {}\", query);\n\n        // Check cache first\n        List<Content> cachedResults = searchCache.getCachedResults(query);\n        if (cachedResults != null) {\n            logger.debug(\"Returning cached results for query: {}\", query);\n            return cachedResults;\n        }\n\n        // Perform search\n        List<Content> results = performSearch(criteria);\n\n        // Cache the results\n        if (!results.isEmpty()) {\n            searchCache.cacheResults(query, results);\n        }\n\n        return results;\n    }\n\n    /**\n     * Performs an asynchronous search with the given criteria.\n     *\n     * @param criteria The search criteria\n     * @return CompletableFuture that will complete with the search results\n     */\n    public CompletableFuture<List<Content>> searchAsync(SearchCriteria criteria) {\n        return CompletableFuture.supplyAsync(() -> search(criteria), executorService);\n    }\n\n    /**\n     * Performs the actual search operation.\n     */\n    private List<Content> performSearch(SearchCriteria criteria) {\n        String query = criteria.getQuery().toLowerCase();\n        ContentType type = criteria.getContentType();\n\n        // Get content based on type\n        Stream<Content> contentStream;\n        if (type == ContentType.MOVIE) {\n            contentStream = dataManager.getAllMovies().stream()\n                    .map(m -> m);\n        } else if (type == ContentType.SERIES) {\n            contentStream = dataManager.getAllSeries().stream()\n                    .map(s -> s);\n        } else {\n            // Search all content types\n            contentStream = Stream.concat(\n                    dataManager.getAllMovies().stream().map(m -> (Content) m),\n                    dataManager.getAllSeries().stream().map(s -> (Content) s)\n            );\n        }\n\n        // Apply search filters\n        List<Predicate<Content>> filters = createSearchFilters(criteria);\n\n        // Apply all filters and collect results\n        return contentStream\n                .filter(content -> filters.stream().allMatch(filter -> filter.test(content)))\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * Creates search filters based on the search criteria.\n     */\n    private List<Predicate<Content>> createSearchFilters(SearchCriteria criteria) {\n        List<Predicate<Content>> filters = new ArrayList<>();\n\n        // Text search filter\n        if (criteria.getQuery() != null && !criteria.getQuery().trim().isEmpty()) {\n            String query = criteria.getQuery().toLowerCase();\n            filters.add(content ->\n                    content.getTitle().toLowerCase().contains(query) ||\n                            (content.getSummary() != null && content.getSummary().toLowerCase().contains(query))\n            );\n        }\n\n        // Genre filter\n        if (criteria.getGenre() != null) {\n            filters.add(content -> content.getGenre() == criteria.getGenre());\n        }\n\n        // Year range filter\n        if (criteria.getMinYear() > 0) {\n            filters.add(content -> content.getYear() >= criteria.getMinYear());\n        }\n        if (criteria.getMaxYear() > 0) {\n            filters.add(content -> content.getYear() <= criteria.getMaxYear());\n        }\n\n        // Rating filter\n        if (criteria.getMinRating() > 0) {\n            filters.add(content -> content.getImdbRating() >= criteria.getMinRating());\n        }\n\n        return filters;\n    }\n\n}\n",
                    "language": "java"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1755189573164,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "command",
                                "attrs": {
                                    "label": "fix"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "fix: "
                                    }
                                ]
                            },
                            {
                                "type": "codeBlock",
                                "attrs": {
                                    "language": "java"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "(content -> content.getYear() >= criteria.getMinYear())"
                                    }
                                ]
                            },
                            {
                                "type": "text",
                                "text": "Operator '>=' cannot be applied to 'java.util.Date', 'java.lang.Integer'"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": []
        }
    ],
    "isAgent": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "isQnaAgent": false,
    "isRepoInfoAgent": false
}
}