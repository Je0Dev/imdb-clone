{
    "checksum": "138f526e378c195587c92b755eba0f572f6703528fcffcf94b0022f6a96927cd",
    "data": {
    "id": "4100ece5-0dad-4890-b4a6-9f171f5b30a5",
    "createdAt": 1754932557292,
    "updatedAt": 1754932559668,
    "title": "Java Method Implementation Fixes",
    "messages": [
        {
            "id": "d9a96ad5-0ae3-4de1-8cc7-6e13e6aefa6d",
            "role": "user",
            "content": [
                {
                    "type": "command",
                    "commandName": "fix"
                },
                {
                    "type": "codeSnippet",
                    "text": "showInfoDialog(\"Upgrade Initiated\", \"Pro plan upgrade initiated. Payment processing would be implemented here.\")",
                    "language": "java"
                },
                {
                    "type": "text",
                    "text": "Cannot resolve method 'showInfoDialog' in 'RefactoredMainController'"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\MA$\\IdeaProjects\\imdb_clone\\src\\main\\java\\com\\papel\\imdb_clone\\controllers\\RefactoredMainController.java",
                    "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java",
                    "content": "package com.papel.imdb_clone.controllers;\n\n// Coordinator imports\n\nimport com.papel.imdb_clone.controllers.coordinator.SearchCoordinator;\nimport com.papel.imdb_clone.controllers.coordinator.UICoordinator;\nimport com.papel.imdb_clone.data.RefactoredDataManager;\nimport com.papel.imdb_clone.data.SearchCriteria;\nimport com.papel.imdb_clone.enums.Genre;\nimport com.papel.imdb_clone.gui.DialogUtils;\nimport com.papel.imdb_clone.model.Content;\nimport com.papel.imdb_clone.model.Movie;\nimport com.papel.imdb_clone.model.Series;\nimport com.papel.imdb_clone.model.User;\nimport com.papel.imdb_clone.service.ServiceLocator;\nimport com.papel.imdb_clone.service.WatchlistService;\nimport com.papel.imdb_clone.util.SettingsManager;\nimport javafx.application.Platform;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.concurrent.Task;\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.BorderPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\n/**\n * Refactored main controller that uses coordinators and services for better separation of concerns.\n * This controller focuses on UI coordination and delegates business logic to specialized services.\n */\npublic class RefactoredMainController {\n    private static final Logger logger = LoggerFactory.getLogger(RefactoredMainController.class);\n\n    // Core services and coordinators\n    private RefactoredDataManager dataManager;\n    private WatchlistService watchlistService;\n    private UICoordinator uiCoordinator;\n    private SearchCoordinator searchCoordinator;\n\n    // UI Components\n    @FXML\n    private BorderPane mainContainer;\n    @FXML\n    private TabPane mainTabPane;\n    @FXML\n    private Tab moviesTab;\n    @FXML\n    private Tab seriesTab;\n    @FXML\n    private Tab watchlistTab;\n\n    // Search UI Components\n    @FXML\n    private TextField titleField;\n    @FXML\n    private ListView<String> genreListView;\n    @FXML\n    private TextField actorField;\n    @FXML\n    private TextField directorField;\n    @FXML\n    private Spinner<Double> minImdbSpinner;\n    @FXML\n    private Spinner<Double> maxImdbSpinner;\n    @FXML\n    private Spinner<Double> minUserSpinner;\n    @FXML\n    private Spinner<Double> maxUserSpinner;\n    @FXML\n    private Spinner<Integer> minDurationSpinner;\n    @FXML\n    private Spinner<Integer> maxDurationSpinner;\n    @FXML\n    private Spinner<Integer> yearFromSpinner;\n    @FXML\n    private Spinner<Integer> yearToSpinner;\n    @FXML\n    private TextField descriptionField;\n    @FXML\n    private TableView<Content> searchResultsTable;\n    @FXML\n    private TableColumn<Content, String> resultTitleColumn;\n    @FXML\n    private TableColumn<Content, Integer> resultYearColumn;\n    @FXML\n    private TableColumn<Content, String> resultTypeColumn;\n    @FXML\n    private TableColumn<Content, String> resultGenreColumn;\n    @FXML\n    private TableColumn<Content, String> resultImdbColumn;\n    @FXML\n    private TableColumn<Content, String> resultDirectorColumn;\n    @FXML\n    private CheckBox trendingToggle;\n    @FXML\n    private CheckBox aiSimilarToggle;\n    @FXML\n    private Label statusLabel;\n    @FXML\n    private Label userLabel;\n    @FXML\n    private ProgressIndicator searchProgressIndicator;\n\n    // State\n    private Stage primaryStage;\n    private User currentUser;\n    private String sessionToken;\n    private Task<javafx.collections.ObservableList<Content>> currentSearchTask;\n\n    /**\n     * Default constructor for FXML loader.\n     * Note: The initialize() method will be called after FXML injection.\n     */\n    public RefactoredMainController() {\n        // Initialize services from ServiceLocator in initialize()\n    }\n\n    /**\n     * Constructor for programmatic creation with user session.\n     */\n    public RefactoredMainController(User user, String sessionToken) {\n        this();\n        this.currentUser = user;\n        this.sessionToken = sessionToken;\n\n        // Initialize services from ServiceLocator\n        initializeServices();\n\n        if (this.uiCoordinator != null) {\n            this.uiCoordinator.setUserSession(user, sessionToken);\n        }\n\n        logger.info(\"RefactoredMainController constructed with user {} and session token\",\n                user != null ? user.getUsername() : \"null\");\n    }\n\n    /**\n     * Initialize services from ServiceLocator.\n     */\n    private void initializeServices() {\n        try {\n            this.dataManager = ServiceLocator.getInstance().getService(RefactoredDataManager.class);\n            if (this.dataManager == null) {\n                logger.error(\"Failed to initialize RefactoredDataManager from ServiceLocator\");\n                return;\n            }\n\n            this.watchlistService = ServiceLocator.getInstance().getService(WatchlistService.class);\n            if (this.watchlistService == null) {\n                this.watchlistService = new WatchlistService(this.dataManager);\n                ServiceLocator.getInstance().registerService(WatchlistService.class, this.watchlistService);\n            }\n\n            this.uiCoordinator = new UICoordinator(this.dataManager, this.watchlistService);\n            this.searchCoordinator = new SearchCoordinator(this.dataManager);\n\n            // Load data\n            this.dataManager.loadAllData();\n\n            logger.info(\"RefactoredMainController services initialized successfully\");\n        } catch (Exception e) {\n            logger.error(\"Failed to initialize services: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Failed to initialize RefactoredMainController services\", e);\n        }\n    }\n\n    @FXML\n    public void initialize() {\n        logger.info(\"Initializing RefactoredMainController\");\n\n        try {\n            // Initialize services if not already done\n            if (this.dataManager == null) {\n                initializeServices();\n\n                // If we have a user from previous session, set it in the UI coordinator\n                if (this.currentUser != null && this.sessionToken != null && this.uiCoordinator != null) {\n                    this.uiCoordinator.setUserSession(this.currentUser, this.sessionToken);\n                }\n            }\n\n            setupUI();\n\n            Platform.runLater(() -> {\n                try {\n                    if (initializeCoordinators()) {\n                        initializeSearchComponents();\n                        setupSearchResultsTable();\n                        updateUserInterface();\n\n                        logger.info(\"RefactoredMainController initialized successfully\");\n                    } else {\n                        logger.error(\"Failed to initialize coordinators\");\n                        showErrorDialog(\"Initialization Error\", \"Failed to initialize application components.\");\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Error during UI initialization\", e);\n                    showErrorDialog(\"Initialization Error\", \"Failed to initialize the UI: \" + e.getMessage());\n                }\n            });\n        } catch (Exception e) {\n            logger.error(\"Critical error during controller initialization\", e);\n            showErrorDialog(\"Critical Error\", \"Failed to initialize the application: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Initializes the UI coordinators and sets up the views.\n     *\n     * @return true if initialization was successful, false otherwise\n     */\n    private boolean initializeCoordinators() {\n        try {\n            if (uiCoordinator == null) {\n                logger.error(\"UI Coordinator is not initialized\");\n                return false;\n            }\n\n            uiCoordinator.setPrimaryStage(primaryStage);\n            uiCoordinator.setUserSession(currentUser, sessionToken);\n\n            if (!uiCoordinator.loadAndInitializeViews()) {\n                logger.error(\"Failed to load and initialize views\");\n                return false;\n            }\n\n            // Set the views in their respective tabs\n            setViewsInTabs();\n\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Error initializing coordinators: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n\n    private void setViewsInTabs() {\n        if (moviesTab != null && uiCoordinator.getMovieView() != null) {\n            moviesTab.setContent(uiCoordinator.getMovieView());\n        }\n\n        if (seriesTab != null && uiCoordinator.getSeriesView() != null) {\n            seriesTab.setContent(uiCoordinator.getSeriesView());\n        }\n\n        if (watchlistTab != null && uiCoordinator.getWatchlistView() != null) {\n            watchlistTab.setContent(uiCoordinator.getWatchlistView());\n        }\n\n        // Set other tabs\n        setTabContent(\"Forum\", uiCoordinator.getForumView());\n        setTabContent(\"News\", uiCoordinator.getNewsView());\n        setTabContent(\"Quiz\", uiCoordinator.getQuizView());\n    }\n\n    private void setTabContent(String tabName, javafx.scene.Node content) {\n        if (mainTabPane != null && content != null) {\n            Tab tab = mainTabPane.getTabs().stream()\n                    .filter(t -> t.getText().contains(tabName))\n                    .findFirst()\n                    .orElse(null);\n            if (tab != null) {\n                tab.setContent(content);\n            }\n        }\n    }\n\n    private void setupUI() {\n        logger.debug(\"Setting up UI components\");\n\n        // Initialize spinners with proper value factories\n        setupSpinners();\n\n        // Initialize progress indicator\n        if (searchProgressIndicator != null) {\n            searchProgressIndicator.setVisible(false);\n        }\n    }\n\n    private void setupSpinners() {\n        if (minImdbSpinner != null) {\n            minImdbSpinner.setValueFactory(new SpinnerValueFactory.DoubleSpinnerValueFactory(0.0, 10.0, 0.0, 0.1));\n        }\n        if (maxImdbSpinner != null) {\n            maxImdbSpinner.setValueFactory(new SpinnerValueFactory.DoubleSpinnerValueFactory(0.0, 10.0, 10.0, 0.1));\n        }\n        if (minUserSpinner != null) {\n            minUserSpinner.setValueFactory(new SpinnerValueFactory.DoubleSpinnerValueFactory(0.0, 10.0, 0.0, 0.1));\n        }\n        if (maxUserSpinner != null) {\n            maxUserSpinner.setValueFactory(new SpinnerValueFactory.DoubleSpinnerValueFactory(0.0, 10.0, 10.0, 0.1));\n        }\n        if (minDurationSpinner != null) {\n            minDurationSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 1000, 0, 5));\n        }\n        if (maxDurationSpinner != null) {\n            maxDurationSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 1000, 300, 5));\n        }\n        if (yearFromSpinner != null) {\n            yearFromSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1900, 2030, 1900, 1));\n        }\n        if (yearToSpinner != null) {\n            yearToSpinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1900, 2030, 2030, 1));\n        }\n    }\n\n    private void initializeSearchComponents() {\n        if (genreListView != null) {\n            genreListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n            List<String> genres = java.util.Arrays.stream(Genre.values())\n                    .map(Genre::toString)\n                    .sorted()\n                    .collect(Collectors.toList());\n            genreListView.setItems(FXCollections.observableArrayList(genres));\n        }\n\n        // Set up keyboard navigation for search\n        setupSearchKeyHandlers();\n    }\n\n    private void setupSearchKeyHandlers() {\n        if (titleField != null) {\n            titleField.setOnKeyPressed(event -> {\n                if (event.getCode() == javafx.scene.input.KeyCode.ENTER) {\n                    handleSearch();\n                }\n            });\n        }\n        if (actorField != null) {\n            actorField.setOnKeyPressed(event -> {\n                if (event.getCode() == javafx.scene.input.KeyCode.ENTER) {\n                    handleSearch();\n                }\n            });\n        }\n        if (directorField != null) {\n            directorField.setOnKeyPressed(event -> {\n                if (event.getCode() == javafx.scene.input.KeyCode.ENTER) {\n                    handleSearch();\n                }\n            });\n        }\n    }\n\n    private void setupSearchResultsTable() {\n        if (searchResultsTable == null) return;\n\n        if (resultTitleColumn != null) {\n            resultTitleColumn.setCellValueFactory(cellData ->\n                    new SimpleStringProperty(cellData.getValue().getTitle()));\n        }\n\n        if (resultYearColumn != null) {\n            resultYearColumn.setCellValueFactory(cellData -> {\n                try {\n                    return new SimpleIntegerProperty(cellData.getValue().getYear().getYear() + 1900).asObject();\n                } catch (Exception e) {\n                    return new SimpleIntegerProperty(0).asObject();\n                }\n            });\n        }\n\n        if (resultTypeColumn != null) {\n            resultTypeColumn.setCellValueFactory(cellData ->\n                    new SimpleStringProperty(cellData.getValue().getClass().getSimpleName()));\n        }\n\n        if (resultGenreColumn != null) {\n            resultGenreColumn.setCellValueFactory(cellData ->\n                    new SimpleStringProperty(cellData.getValue().getGenres().toString()));\n        }\n\n        if (resultImdbColumn != null) {\n            resultImdbColumn.setCellValueFactory(cellData ->\n                    new SimpleStringProperty(String.format(\"%.1f\", cellData.getValue().getImdbRating())));\n        }\n\n        if (resultDirectorColumn != null) {\n            resultDirectorColumn.setCellValueFactory(cellData -> {\n                String director = \"N/A\";\n                if (cellData.getValue() instanceof com.papel.imdb_clone.model.Movie) {\n                    director = cellData.getValue().getDirector();\n                }\n                return new SimpleStringProperty(director != null ? director : \"N/A\");\n            });\n        }\n    }\n\n    @FXML\n    private void handleSearch() {\n        logger.debug(\"Handling search request\");\n\n        if (currentSearchTask != null && !currentSearchTask.isDone()) {\n            currentSearchTask.cancel(true);\n        }\n\n        SearchCriteria criteria = buildSearchCriteriaFromUI();\n\n        if (searchProgressIndicator != null) {\n            searchProgressIndicator.setVisible(true);\n        }\n\n        currentSearchTask = searchCoordinator.createSearchTask(criteria);\n\n        currentSearchTask.setOnSucceeded(event -> {\n            Platform.runLater(() -> {\n                if (searchResultsTable != null) {\n                    searchResultsTable.setItems(currentSearchTask.getValue());\n                }\n                if (searchProgressIndicator != null) {\n                    searchProgressIndicator.setVisible(false);\n                }\n                updateStatusLabel(\"Search completed. Found \" + (currentSearchTask.getValue() != null ? currentSearchTask.getValue().size() : 0) + \" results.\");\n            });\n        });\n\n        currentSearchTask.setOnFailed(event -> {\n            Platform.runLater(() -> {\n                if (searchProgressIndicator != null) {\n                    searchProgressIndicator.setVisible(false);\n                }\n                updateStatusLabel(\"Search failed: \" + currentSearchTask.getException().getMessage());\n                logger.error(\"Search failed\", currentSearchTask.getException());\n            });\n        });\n\n        Thread searchThread = new Thread(currentSearchTask);\n        searchThread.setDaemon(true);\n        searchThread.start();\n    }\n\n    private SearchCriteria buildSearchCriteriaFromUI() {\n        String title = titleField != null ? titleField.getText() : null;\n        String actorName = actorField != null ? actorField.getText() : null;\n        String directorName = directorField != null ? directorField.getText() : null;\n        String description = descriptionField != null ? descriptionField.getText() : null;\n\n        List<Genre> selectedGenres = null;\n        if (genreListView != null) {\n            selectedGenres = genreListView.getSelectionModel().getSelectedItems().stream()\n                    .map(genreStr -> {\n                        try {\n                            return Genre.valueOf(genreStr.toUpperCase());\n                        } catch (IllegalArgumentException e) {\n                            return null;\n                        }\n                    })\n                    .filter(genre -> genre != null)\n                    .collect(Collectors.toList());\n        }\n\n        Double minImdb = minImdbSpinner != null ? minImdbSpinner.getValue() : null;\n        Double maxImdb = maxImdbSpinner != null ? maxImdbSpinner.getValue() : null;\n        Double minUser = minUserSpinner != null ? minUserSpinner.getValue() : null;\n        Double maxUser = maxUserSpinner != null ? maxUserSpinner.getValue() : null;\n        Integer minDuration = minDurationSpinner != null ? minDurationSpinner.getValue() : null;\n        Integer maxDuration = maxDurationSpinner != null ? maxDurationSpinner.getValue() : null;\n        Integer yearFrom = yearFromSpinner != null ? yearFromSpinner.getValue() : null;\n        Integer yearTo = yearToSpinner != null ? yearToSpinner.getValue() : null;\n\n        return searchCoordinator.buildSearchCriteria(\n                title, selectedGenres, actorName, directorName,\n                minImdb, maxImdb, minUser, maxUser,\n                minDuration, maxDuration, yearFrom, yearTo, description\n        );\n    }\n\n    @FXML\n    private void clearSearch() {\n        logger.debug(\"Clearing search fields\");\n\n        if (titleField != null) titleField.clear();\n        if (actorField != null) actorField.clear();\n        if (directorField != null) directorField.clear();\n        if (descriptionField != null) descriptionField.clear();\n\n        if (genreListView != null) {\n            genreListView.getSelectionModel().clearSelection();\n        }\n\n        resetSpinners();\n\n        if (searchResultsTable != null) {\n            searchResultsTable.getItems().clear();\n        }\n\n        updateStatusLabel(\"Search cleared\");\n    }\n\n    private void resetSpinners() {\n        if (minImdbSpinner != null && minImdbSpinner.getValueFactory() != null) {\n            minImdbSpinner.getValueFactory().setValue(0.0);\n        }\n        if (maxImdbSpinner != null && maxImdbSpinner.getValueFactory() != null) {\n            maxImdbSpinner.getValueFactory().setValue(10.0);\n        }\n        if (minUserSpinner != null && minUserSpinner.getValueFactory() != null) {\n            minUserSpinner.getValueFactory().setValue(0.0);\n        }\n        if (maxUserSpinner != null && maxUserSpinner.getValueFactory() != null) {\n            maxUserSpinner.getValueFactory().setValue(10.0);\n        }\n        if (minDurationSpinner != null && minDurationSpinner.getValueFactory() != null) {\n            minDurationSpinner.getValueFactory().setValue(0);\n        }\n        if (maxDurationSpinner != null && maxDurationSpinner.getValueFactory() != null) {\n            maxDurationSpinner.getValueFactory().setValue(300);\n        }\n        if (yearFromSpinner != null && yearFromSpinner.getValueFactory() != null) {\n            yearFromSpinner.getValueFactory().setValue(1900);\n        }\n        if (yearToSpinner != null && yearToSpinner.getValueFactory() != null) {\n            yearToSpinner.getValueFactory().setValue(2030);\n        }\n    }\n\n    /**\n     * Updates UI elements that depend on the current user/session state and refreshes views.\n     */\n    private void updateUserInterface() {\n        try {\n            if (userLabel != null) {\n                String name = (currentUser != null && currentUser.getUsername() != null)\n                        ? currentUser.getUsername() : \"Guest\";\n                userLabel.setText(\"User: \" + name);\n            }\n            if (uiCoordinator != null) {\n                uiCoordinator.refreshAllControllers();\n            }\n        } catch (Exception e) {\n            logger.warn(\"Failed to update user interface state\", e);\n        }\n    }\n\n    /**\n     * Exposes the WatchlistService to child controllers.\n     */\n    public WatchlistService getWatchlistService() {\n        return watchlistService;\n    }\n\n    /**\n     * Helper to add a movie to the user's favorites (watchlist).\n     */\n    public void addMovieToWatchlist(Movie movie) {\n        if (movie == null) return;\n        if (currentUser == null) {\n            DialogUtils.showError(\"Login Required\", \"Please log in to add items to a watchlist.\");\n            return;\n        }\n        try {\n            watchlistService.addToFavorites(currentUser.getId(), movie.getId());\n            DialogUtils.showSuccess(\"Added\", '\"' + movie.getTitle() + '\"' + \" added to Favorites.\");\n        } catch (Exception e) {\n            logger.error(\"Failed to add movie to watchlist\", e);\n            DialogUtils.showError(\"Error\", \"Could not add movie to watchlist: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Helper to add a series to the user's favorites (watchlist).\n     */\n    public void addSeriesToWatchlist(Series series) {\n        if (series == null) return;\n        if (currentUser == null) {\n            DialogUtils.showError(\"Login Required\", \"Please log in to add items to a watchlist.\");\n            return;\n        }\n        try {\n            watchlistService.addToFavorites(currentUser.getId(), series.getId());\n            DialogUtils.showSuccess(\"Added\", '\"' + series.getTitle() + '\"' + \" added to Favorites.\");\n        } catch (Exception e) {\n            logger.error(\"Failed to add series to watchlist\", e);\n            DialogUtils.showError(\"Error\", \"Could not add series to watchlist: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handlePreferences() {\n        showPreferencesDialog();\n    }\n\n    /**\n     * Handles the exit action from the File menu.\n     * Performs cleanup and exits the application.\n     */\n    @FXML\n    private void handleExit() {\n        logger.info(\"Exit requested by user\");\n        try {\n            // Perform cleanup\n            cleanup();\n\n            // Close the application\n            Platform.exit();\n            System.exit(0);\n        } catch (Exception e) {\n            logger.error(\"Error during application exit: {}\", e.getMessage(), e);\n            // Force exit even if there was an error\n            System.exit(1);\n        }\n    }\n\n    private void showPreferencesDialog() {\n        Dialog<ButtonType> dialog = new Dialog<>();\n        dialog.setTitle(\"Preferences\");\n        dialog.setHeaderText(\"Application Settings\");\n\n        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);\n\n        VBox content = new VBox(10);\n        content.setPadding(new Insets(20));\n\n        SettingsManager settings = SettingsManager.getInstance();\n\n        // Theme selection\n        Label themeLabel = new Label(\"Theme:\");\n        ComboBox<String> themeCombo = new ComboBox<>();\n        themeCombo.getItems().addAll(\"Classic\", \"Neon\", \"High-Contrast\");\n        String currentTheme = settings.getTheme();\n        if (\"high-contrast\".equals(currentTheme)) themeCombo.setValue(\"High-Contrast\");\n        else if (\"neon\".equals(currentTheme)) themeCombo.setValue(\"Neon\");\n        else themeCombo.setValue(\"Classic\");\n\n        // Font size\n        Label fontSizeLabel = new Label(\"Font Size:\");\n        Spinner<Integer> fontSizeSpinner = new Spinner<>(10, 22, settings.getFontSize());\n\n        // Reduced motion\n        Label motionLabel = new Label(\"Reduced Motion:\");\n        CheckBox reducedMotion = new CheckBox(\"Minimize animations and effects\");\n        reducedMotion.setSelected(settings.isReducedMotion());\n\n        GridPane grid = new GridPane();\n        grid.setHgap(10);\n        grid.setVgap(10);\n        grid.add(themeLabel, 0, 0);\n        grid.add(themeCombo, 1, 0);\n        grid.add(fontSizeLabel, 0, 1);\n        grid.add(fontSizeSpinner, 1, 1);\n        grid.add(motionLabel, 0, 2);\n        grid.add(reducedMotion, 1, 2);\n\n        content.getChildren().add(grid);\n        dialog.getDialogPane().setContent(content);\n\n        if (primaryStage != null) {\n            dialog.initOwner(primaryStage);\n        }\n\n        var result = dialog.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // Save preferences\n            String sel = themeCombo.getValue();\n            String themeKey = \"classic\";\n            if (\"Neon\".equals(sel)) themeKey = \"neon\";\n            else if (\"High-Contrast\".equals(sel)) themeKey = \"high-contrast\";\n\n            settings.setTheme(themeKey);\n            settings.setFontSize(fontSizeSpinner.getValue());\n            settings.setReducedMotion(reducedMotion.isSelected());\n            settings.save();\n        }\n    }\n\n    private void updateStatusLabel(String message) {\n        if (statusLabel != null) {\n            Platform.runLater(() -> statusLabel.setText(message));\n        }\n    }\n\n    private void showErrorDialog(String title, String message) {\n        if (primaryStage != null) {\n            DialogUtils.showError(title, message);\n        } else {\n            logger.error(\"{}: {}\", title, message);\n        }\n    }\n\n    // Setters for dependency injection\n    public void setPrimaryStage(Stage primaryStage) {\n        this.primaryStage = primaryStage;\n        if (uiCoordinator != null) {\n            uiCoordinator.setPrimaryStage(primaryStage);\n        }\n    }\n\n    public void setCurrentUser(User currentUser) {\n        this.currentUser = currentUser;\n        if (uiCoordinator != null) {\n            uiCoordinator.setUserSession(currentUser, sessionToken);\n        }\n    }\n\n    public void setSessionToken(String sessionToken) {\n        this.sessionToken = sessionToken;\n        if (uiCoordinator != null) {\n            uiCoordinator.setUserSession(currentUser, sessionToken);\n        }\n    }\n\n    /**\n     * Cleans up resources and shuts down services.\n     * This should be called when the controller is no longer needed.\n     */\n    public void cleanup() {\n        logger.info(\"Cleaning up RefactoredMainController\");\n\n        // Cancel any running search tasks\n        if (currentSearchTask != null) {\n            if (!currentSearchTask.isDone()) {\n                currentSearchTask.cancel(true);\n            }\n            currentSearchTask = null;\n        }\n\n        // Shutdown coordinators\n        if (searchCoordinator != null) {\n            try {\n                searchCoordinator.shutdown();\n            } catch (Exception e) {\n                logger.warn(\"Error shutting down search coordinator: {}\", e.getMessage());\n            }\n        }\n\n        // Clean up UI coordinator\n        if (uiCoordinator != null) {\n            try {\n                uiCoordinator.cleanup();\n            } catch (Exception e) {\n                logger.warn(\"Error cleaning up UI coordinator: {}\", e.getMessage());\n            }\n        }\n\n        // Clear references\n        currentUser = null;\n        sessionToken = null;\n\n        logger.info(\"RefactoredMainController cleanup complete\");\n    }\n\n    /**\n     * Handles the Toggle Theme action from the menu.\n     * Toggles between light and dark themes.\n     */\n    @FXML\n    private void handleAskAI() {\n        try {\n            // Show a simple input dialog to get the user's question\n            TextInputDialog dialog = new TextInputDialog();\n            dialog.setTitle(\"Ask AI\");\n            dialog.setHeaderText(\"Ask me anything about movies, series, or recommendations\");\n            dialog.setContentText(\"Your question:\");\n\n            // Show the dialog and wait for user input\n            Optional<String> result = dialog.showAndWait();\n            result.ifPresent(question -> {\n                // In a real implementation, you would call your AI service here\n                // For now, we'll just show a simple response\n                String response = \"I'm sorry, the AI feature is not yet implemented. \" +\n                        \"You asked: \" + question;\n\n                Alert alert = new Alert(Alert.AlertType.INFORMATION);\n                alert.setTitle(\"AI Response\");\n                alert.setHeaderText(null);\n                alert.setContentText(response);\n                alert.showAndWait();\n            });\n        } catch (Exception e) {\n            logger.error(\"Error in handleAskAI\", e);\n            showErrorDialog(\"AI Error\", \"An error occurred while processing your request: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handleRecommend() {\n        try {\n            // In a real implementation, this would show a dialog to get preferences\n            // and then show AI-generated recommendations\n            Alert alert = new Alert(Alert.AlertType.INFORMATION);\n            alert.setTitle(\"AI Recommendations\");\n            alert.setHeaderText(null);\n            alert.setContentText(\"The AI recommendation feature is not yet implemented.\\n\\n\" +\n                    \"When implemented, this will provide personalized recommendations \" +\n                    \"based on your watch history and preferences.\");\n            alert.showAndWait();\n        } catch (Exception e) {\n            logger.error(\"Error in handleRecommend\", e);\n            showErrorDialog(\"Recommendation Error\", \"Failed to generate recommendations: \" + e.getMessage());\n        }\n    }\n\n    @FXML\n    private void handleToggleTheme() {\n        try {\n            SettingsManager settings = SettingsManager.getInstance();\n            String currentTheme = settings.getTheme();\n            String newTheme = \"classic\".equals(currentTheme) ? \"dark\" : \"classic\";\n\n            // Update the theme in settings\n            settings.setTheme(newTheme);\n\n            // Apply the new theme\n            applyTheme(newTheme);\n\n            logger.info(\"Theme toggled to: {}\", newTheme);\n        } catch (Exception e) {\n            logger.error(\"Error toggling theme\", e);\n            // Show error message to user\n            if (mainContainer != null) {\n                DialogUtils.showError(\"Error\",\n                        \"Failed to toggle theme. An error occurred while changing the theme: \" + e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * Applies the specified theme to the application.\n     *\n     * @param theme The name of the theme to apply (e.g., \"classic\", \"dark\")\n     */\n    private void applyTheme(String theme) {\n        if (mainContainer == null) {\n            logger.warn(\"Main container is not initialized. Cannot apply theme.\");\n            return;\n        }\n\n        // Remove all existing theme stylesheets\n        mainContainer.getStylesheets().removeIf(style ->\n                style.contains(\"themes/classic-theme.css\") ||\n                        style.contains(\"themes/dark-theme.css\") ||\n                        style.contains(\"themes/high-contrast-theme.css\")\n        );\n\n        // Add the new theme stylesheet\n        try {\n            String themeCss = getClass().getResource(\"/css/themes/\" + theme + \"-theme.css\").toExternalForm();\n            mainContainer.getStylesheets().add(themeCss);\n            logger.debug(\"Applied theme: {}\", theme);\n        } catch (Exception e) {\n            logger.error(\"Error applying theme: \" + theme, e);\n        }\n\n        // Update any UI components that need special handling\n        updateUIForTheme(theme);\n    }\n\n    /**\n     * Updates UI components that need special handling when the theme changes.\n     *\n     * @param theme The name of the current theme\n     */\n    private void updateUIForTheme(String theme) {\n        // Add any theme-specific UI updates here\n        // For example, updating text colors, backgrounds, etc.\n\n        // Example:\n        // boolean isDark = \"dark\".equals(theme);\n        // String textColor = isDark ? \"#ffffff\" : \"#000000\";\n        // mainContainer.setStyle(\"-fx-text-fill: \" + textColor + \";\");\n    }\n\n    // ===== PRICING PLAN EVENT HANDLERS =====\n\n    /**\n     * Handles the Free plan selection.\n     */\n    @FXML\n    private void handlePlanFree() {\n        logger.info(\"Free plan selected by user: {}\", currentUser != null ? currentUser.getUsername() : \"anonymous\");\n        \n        // Show confirmation dialog\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(\"Free Plan Selected\");\n        alert.setHeaderText(\"Welcome to the Free Plan!\");\n        alert.setContentText(\"You're already enjoying our free features:\\n\" +\n                \"• Basic browsing\\n\" +\n                \"• Local watchlists\\n\" +\n                \"• Community access\\n\\n\" +\n                \"Upgrade anytime to unlock more features!\");\n        \n        alert.showAndWait();\n    }\n\n    /**\n     * Handles the Pro plan selection.\n     */\n    @FXML\n    private void handlePlanPro() {\n        logger.info(\"Pro plan selected by user: {}\", currentUser != null ? currentUser.getUsername() : \"anonymous\");\n        \n        // Show upgrade dialog\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n        alert.setTitle(\"Upgrade to Pro\");\n        alert.setHeaderText(\"Upgrade to Pro Plan - $4.99/month\");\n        alert.setContentText(\"Pro features include:\\n\" +\n                \"• Advanced search capabilities\\n\" +\n                \"• Theme customization\\n\" +\n                \"• Priority updates\\n\\n\" +\n                \"Would you like to proceed with the upgrade?\");\n        \n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // TODO: Implement actual payment processing\n            showInfoDialog(\"Upgrade Initiated\", \"Pro plan upgrade initiated. Payment processing would be implemented here.\");\n        }\n    }\n\n    /**\n     * Handles the Ultra plan selection.\n     */\n    @FXML\n    private void handlePlanUltra() {\n        logger.info(\"Ultra plan selected by user: {}\", currentUser != null ? currentUser.getUsername() : \"anonymous\");\n        \n        // Show upgrade dialog\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n        alert.setTitle(\"Upgrade to Ultra\");\n        alert.setHeaderText(\"Upgrade to Ultra Plan - $9.99/month\");\n        alert.setContentText(\"Ultra features include:\\n\" +\n                \"• Everything in Pro\\n\" +\n                \"• Cloud sync (coming soon)\\n\" +\n                \"• Early access to new features\\n\" +\n                \"• Premium support\\n\\n\" +\n                \"Would you like to proceed with the upgrade?\");\n        \n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // TODO: Implement actual payment processing\n            showInfoDialog(\"Upgrade Initiated\", \"Ultra plan upgrade initiated. Payment processing would be implemented here.\");\n        }\n    }\n}",
                    "language": "java"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1754932557300,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "command",
                                "attrs": {
                                    "label": "fix"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "fix: "
                                    }
                                ]
                            },
                            {
                                "type": "codeBlock",
                                "attrs": {
                                    "language": "java"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "showInfoDialog(\"Upgrade Initiated\", \"Pro plan upgrade initiated. Payment processing would be implemented here.\")"
                                    }
                                ]
                            },
                            {
                                "type": "text",
                                "text": "Cannot resolve method 'showInfoDialog' in 'RefactoredMainController'"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": []
        },
        {
            "id": "89b19a17-9602-46af-b8bf-60f8ff77058c",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I can see the issue. The `RefactoredMainController` is trying to call `showInfoDialog` method, but this method doesn't exist in the class. Let me first search for where this method might be defined or used elsewhere in the codebase to understand the expected implementation."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_016stWdRqcQRPXktHYwzWkVJ",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me check the `GlobalExceptionHandler` to see how `showInfoDialog` is implemented there:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01LKBfb2LwXAaMon2NL6hWZt",
                    "statusText": "Viewed file (line 137 and onwards)",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "src/main/java/com/papel/imdb_clone/util/GlobalExceptionHandler.java",
                                "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/util/GlobalExceptionHandler.java"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me check if there's already a `showErrorDialog` method in the `RefactoredMainController` to see the pattern:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01YGHaBWxXQ6BV7WM6y91YGn",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Perfect! Let me check the existing `showErrorDialog` method in the `RefactoredMainController` to see the pattern:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01D8uBdbutAPetL5yVw6xxmj",
                    "statusText": "Viewed file (lines 668:707)",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java",
                                "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Great! I can see that the `RefactoredMainController` already has a `showErrorDialog` method that uses `DialogUtils.showError()`. Let me check what methods are available in `DialogUtils`:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01NZv5m7FmJ76y1jKCsHQA4h",
                    "statusText": "Viewed whole file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "src/main/java/com/papel/imdb_clone/gui/DialogUtils.java",
                                "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/gui/DialogUtils.java"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Perfect! I can see that `DialogUtils` already has a `showInfo` method (line 44-46). Now I need to add a `showInfoDialog` method to the `RefactoredMainController` class, following the same pattern as the existing `showErrorDialog` method.\n\nLet me find the exact location where I need to add this method by looking at the area around the `showErrorDialog` method:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Wfqq1iQrmDzHh78Tgj3BFF",
                    "statusText": "Viewed file (lines 665:704)",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java",
                                "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I'll add the `showInfoDialog` method right after the `showErrorDialog` method:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01W6gt3ZrFHKPBjtMWNQtZhf",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java",
                                "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java\n+++ C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java\n@@ -687,6 +687,14 @@\n         }\n     }\n \n+    private void showInfoDialog(String title, String message) {\n+        if (primaryStage != null) {\n+            DialogUtils.showInfo(title, message);\n+        } else {\n+            logger.info(\"{}: {}\", title, message);\n+        }\n+    }\n+\n     // Setters for dependency injection\n     public void setPrimaryStage(Stage primaryStage) {\n         this.primaryStage = primaryStage;",
                    "refToolCallId": "toolu_01W6gt3ZrFHKPBjtMWNQtZhf"
                },
                {
                    "type": "text",
                    "text": "Perfect! I've successfully added the `showInfoDialog` method to the `RefactoredMainController` class. The method follows the same pattern as the existing `showErrorDialog` method:\n\n1. **Consistent Pattern**: It uses the same structure as `showErrorDialog`, checking if `primaryStage` is available\n2. **Proper Dialog Handling**: When `primaryStage` is available, it uses `DialogUtils.showInfo()` to display the information dialog\n3. **Fallback Logging**: When `primaryStage` is not available, it logs the message using the logger with info level (instead of error level)\n4. **Method Signature**: It matches the expected signature `showInfoDialog(String title, String message)` that was being called in the code\n\nThe fix resolves the \"Cannot resolve method 'showInfoDialog'\" error by providing the missing method implementation. Now the calls to `showInfoDialog(\"Upgrade Initiated\", \"Pro plan upgrade initiated. Payment processing would be implemented here.\")` and similar calls will work correctly, displaying information dialogs to the user when the upgrade process is initiated."
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java",
                            "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/controllers/RefactoredMainController.java",
                            "patch": "@@ -25584,24 +25584,259 @@\n    %7D%0A    %7D%0A%0A\n+    private void showInfoDialog(String title, String message) %7B%0A        if (primaryStage != null) %7B%0A            DialogUtils.showInfo(title, message);%0A        %7D else %7B%0A            logger.info(%22%7B%7D: %7B%7D%22, title, message);%0A        %7D%0A    %7D%0A%0A\n     // Sette\n",
                            "isNew": false,
                            "isApplied": false
                        }
                    ]
                }
            ],
            "context": {
                "author": "Code agent",
                "operationId": "36d45bea-93d0-4bfe-8919-028976f2ab65",
                "usageStatistics": {
                    "llmCallsUsedForAnswer": 8.0,
                    "llmCallsUsedTotal": 26.0,
                    "llmCallsLimit": 200.0,
                    "limitRenewalMillisecondTimestamp": 1755012909672
                }
            },
            "createdAt": 1754932559668,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "isQnaAgent": false,
    "isRepoInfoAgent": false
}
}