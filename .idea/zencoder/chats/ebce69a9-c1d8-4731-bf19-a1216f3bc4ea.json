{
    "checksum": "dcbf24b00ec040a2367a584cf42b0258a9f653a19d99bf93fd8123960faafc04",
    "data": {
    "id": "ebce69a9-c1d8-4731-bf19-a1216f3bc4ea",
    "createdAt": 1754629442498,
    "updatedAt": 1754629445668,
    "title": "/fix Director director = findDirectorByName(par...",
    "messages": [
        {
            "id": "29ee9aa3-110e-4cc2-bd28-112cd23d1da3",
            "role": "user",
            "content": [
                {
                    "type": "command",
                    "commandName": "fix"
                },
                {
                    "type": "codeSnippet",
                    "text": "Director director = findDirectorByName(parts[4]);",
                    "language": "java"
                },
                {
                    "type": "text",
                    "text": "Ambiguous method call: both 'DataManager.findDirectorByName(String)' and 'DataManager.findDirectorByName(String)' match"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\mas_b\\IdeaProjects\\imdb_clone\\src\\main\\java\\com\\papel\\imdb_clone\\data\\DataManager.java",
                    "fsPath": "C:/Users/mas_b/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/data/DataManager.java",
                    "content": "package com.papel.imdb_clone.data;\n\nimport com.papel.imdb_clone.enums.Genre;\nimport com.papel.imdb_clone.exceptions.DuplicateContentException;\nimport com.papel.imdb_clone.exceptions.DuplicateUsernameException;\nimport com.papel.imdb_clone.exceptions.FileParsingException;\nimport com.papel.imdb_clone.model.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\nimport java.util.stream.Collectors;\n\npublic class DataManager {\n    private final List<User> users;\n    private final List<Actor> actors;\n    private final List<Director> directors;\n    private final List<Movie> movies;\n    private final List<Series> series;\n    private final List<ForumPost> forumPosts;\n\n    // Atomic counters for thread-safe ID generation\n    private final AtomicInteger nextUserId = new AtomicInteger(1);\n    private final AtomicInteger nextActorId = new AtomicInteger(1);\n    private final AtomicInteger nextDirectorId = new AtomicInteger(1);\n    private final AtomicInteger nextMovieId = new AtomicInteger(1);\n    private final AtomicInteger nextSeriesId = new AtomicInteger(1);\n    private final AtomicInteger nextSeasonId = new AtomicInteger(1);\n    private final AtomicInteger nextEpisodeId = new AtomicInteger(1);\n    private final AtomicInteger nextForumPostId = new AtomicInteger(1);\n    private final int nextForumPostIdSanitized = 1; // For tracking the next available sanitized ID\n    // Locks for thread-safe operations\n    private final ReentrantReadWriteLock forumPostLock = new ReentrantReadWriteLock();\n    private final ReentrantReadWriteLock movieLock = new ReentrantReadWriteLock();\n    private final ReentrantReadWriteLock seriesLock = new ReentrantReadWriteLock();\n    private final ReentrantReadWriteLock userLock = new ReentrantReadWriteLock();\n    private final ReentrantReadWriteLock actorLock = new ReentrantReadWriteLock();\n    private final ReentrantReadWriteLock directorLock = new ReentrantReadWriteLock();\n\n    private static final Logger logger = LoggerFactory.getLogger(DataManager.class.getName());\n\n    // We don't need separate allMovies and allSeries fields since we already have movies and series lists\n\n    /**\n     * Initializes a new instance of the DataManager class.\n     * This constructor sets up empty lists for users, actors, directors, movies, series, and forum posts.\n     */\n    public DataManager() {\n        // Using CopyOnWriteArrayList for thread-safe iteration\n        this.users = new CopyOnWriteArrayList<>();\n        this.actors = new CopyOnWriteArrayList<>();\n        this.directors = new CopyOnWriteArrayList<>();\n        this.movies = new CopyOnWriteArrayList<>();\n        this.series = new CopyOnWriteArrayList<>();\n        this.forumPosts = new CopyOnWriteArrayList<>();\n    }\n\n\n    public void loadAllData() {\n        loadUsers(\"users.txt\");\n        loadActors(\"actors.txt\");\n        loadDirectors(\"directors.txt\");\n        loadMovies(\"movies.txt\");\n        loadSeries(\"series.txt\");\n        loadAwardsAndBoxOffice(\"awards_boxoffice.txt\");\n        loadForumPosts(\"forum_posts.txt\");\n    }\n\n    public void loadUsers(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] parts = parseCSVLine(line);\n                if (parts.length >= 6) {\n\n                    // Format: firstName,middleName/nickname,lastName,gender,nationality,username\n                    String firstName = parts[0];\n                    String middleName = parts[1].replaceAll(\"\\\"\", \"\"); // Remove quotes\n                    String lastName = parts[2];\n                    char gender = parts[3].charAt(0);\n                    String nationality = parts[4];\n                    String username = parts[5];\n\n                    // Combine names appropriately\n                    String fullFirstName = middleName.isEmpty() ? firstName : firstName + \" \" + middleName;\n                    User user = new User(fullFirstName, lastName, username, gender, nationality);\n                    user.setId(nextUserId.getAndIncrement());\n                    users.add(user);\n                } else if (parts.length >= 5) {\n                    // Standard format: firstName,lastName,username,gender,nationality\n                    User user = new User(parts[0], parts[1], parts[2], parts[3].charAt(0), parts[4]);\n                    user.setId(nextUserId.getAndIncrement());\n                    users.add(user);\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading users: \" + e.getMessage());\n        }\n    }\n\n    public void loadActors(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] parts = parseCSVLine(line);\n                if (parts.length >= 6) {\n                    // Handle the case where middle name/nickname is quoted\n                    // Format: firstName,middleName/nickname,lastName,birthDate,gender,nationality\n                    String firstName = parts[0];\n                    String middleName = parts[1].replaceAll(\"\\\"\", \"\"); // Remove quotes\n                    String lastName = parts[2];\n                    LocalDate birthDate = LocalDate.parse(parts[3], DateTimeFormatter.ISO_LOCAL_DATE);\n                    char gender = parts[4].charAt(0);\n                    String nationality = parts[5];\n\n                    // Combine names appropriately\n                    String fullFirstName = middleName.isEmpty() ? firstName : firstName + \" \" + middleName;\n                    Actor actor = new Actor(fullFirstName, lastName, birthDate, gender, nationality);\n                    actor.setId(nextActorId.getAndIncrement());\n                    actors.add(actor);\n                } else if (parts.length >= 5) {\n                    // Standard format: firstName,lastName,birthDate,gender,nationality\n                    LocalDate birthDate = LocalDate.parse(parts[2], DateTimeFormatter.ISO_LOCAL_DATE);\n                    Actor actor = new Actor(parts[0], parts[1], birthDate, parts[3].charAt(0), parts[4]);\n                    actor.setId(nextActorId.getAndIncrement());\n                    actors.add(actor);\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading actors: \" + e.getMessage());\n        }\n    }\n\n    public void loadDirectors(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] parts = parseCSVLine(line);\n                if (parts.length >= 5) {\n                    // Handle the case where middle name/nickname is quoted\n                    // Format: firstName,middleName/nickname,lastName,birthDate,gender\n                    String firstName = parts[0];\n                    String middleName = parts[1].replaceAll(\"\\\"\", \"\"); // Remove quotes\n                    String lastName = parts[2];\n                    LocalDate birthDate = LocalDate.parse(parts[3], DateTimeFormatter.ISO_LOCAL_DATE);\n                    char gender = parts[4].charAt(0);\n\n                    // Combine names appropriately\n                    String fullFirstName = middleName.isEmpty() ? firstName : firstName + \" \" + middleName;\n                    Director director = new Director(fullFirstName, lastName, birthDate, gender);\n                    director.setId(nextDirectorId.getAndIncrement());\n                    directors.add(director);\n                } else if (parts.length >= 4) {\n                    // Standard format: firstName,lastName,birthDate,gender\n                    LocalDate birthDate = LocalDate.parse(parts[2], DateTimeFormatter.ISO_LOCAL_DATE);\n                    Director director = new Director(parts[0], parts[1], birthDate, parts[3].charAt(0));\n                    director.setId(nextDirectorId.getAndIncrement());\n                    directors.add(director);\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading directors: \" + e.getMessage());\n        }\n    }\n\n    public void loadMovies(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] parts = parseCSVLine(line);\n                if (parts.length >= 6) {\n                    String title = parts[0];\n                    int year = Integer.parseInt(parts[1]);\n                    Genre genre = Genre.valueOf(parts[2].toUpperCase().replace(\" \", \"_\"));\n                    int duration = Integer.parseInt(parts[3]);\n                    Director director = findDirectorByName(parts[4]);\n                    double imdbRating = Double.parseDouble(parts[5]);\n\n                    List<Actor> movieActors = new ArrayList<>();\n                    if (parts.length > 6) {\n                        String[] actorNames = parts[6].split(\";\");\n                        for (String actorName : actorNames) {\n                            Actor actor = findActorByName(actorName.trim());\n                            if (actor != null) {\n                                movieActors.add(actor);\n                            }\n                        }\n                    }\n\n                    // Handle case where director might be null\n                    Movie movie;\n                    if (director != null) {\n                        movie = new Movie(title, year, director, null, duration, movieActors, imdbRating);\n                    } else {\n                        // Create a movie with genre and director name from the file when director object is not found\n                        movie = new Movie(title, year, genre.name(), parts[4], new HashMap<>(), imdbRating);\n                        movie.setActors(movieActors);\n                    }\n                    movie.setId(nextMovieId.getAndIncrement());\n                    movies.add(movie);\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading movies: \" + e.getMessage());\n        }\n    }\n\n    public void loadSeries(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] parts = parseCSVLine(line);\n                if (parts.length >= 2) {\n                    String title = parts[0];\n                    // Split the genre string on pipe and take the first part\n                    String genreStr = parts[1].split(\"\\\\|\")[0].trim();\n                    Genre genre = Genre.valueOf(genreStr.toUpperCase().replace(\" \", \"_\"));\n\n                    Series series = new Series(title);\n                    series.setGenre(genre);  // Set the genre from the file\n                    series.setId(nextSeriesId.getAndIncrement());\n                    this.series.add(series);\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading series: \" + e.getMessage());\n        }\n    }\n\n    public void loadAwardsAndBoxOffice(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                // Skip comments and empty lines\n                if (line.trim().isEmpty() || line.startsWith(\"#\")) {\n                    continue;\n                }\n\n                String[] parts = line.split(\"\\\\|\");\n                if (parts.length >= 4) {\n                    String type = parts[0].trim();\n                    String title = parts[1].trim();\n                    String boxOffice = parts[2].trim();\n                    String awardsStr = parts[3].trim();\n\n                    // Parse awards\n                    List<String> awards = new ArrayList<>();\n                    if (!awardsStr.isEmpty()) {\n                        String[] awardArray = awardsStr.split(\";\");\n                        for (String award : awardArray) {\n                            awards.add(award.trim());\n                        }\n                    }\n\n                    // Apply to movies or series\n                    if (\"MOVIE\".equals(type)) {\n                        Movie movie = findMovieByTitle(title);\n                        if (movie != null) {\n                            movie.setBoxOffice(boxOffice);\n                            movie.setAwards(awards);\n                        }\n                    } else if (\"SERIES\".equals(type)) {\n                        Series series = findSeriesByTitle(title);\n                        if (series != null) {\n                            series.setBoxOffice(boxOffice);\n                            series.setAwards(awards);\n                        }\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading awards and box office data: \" + e.getMessage());\n        }\n    }\n\n    public void loadForumPosts(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/data/\" + filename))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                // Skip empty lines\n                if (line.trim().isEmpty()) {\n                    continue;\n                }\n\n                String[] parts = parseCSVLine(line);\n                if (parts.length >= 8) {\n                    // Format: id,userId,title,content,createdAt,updatedAt,upvotes,downvotes\n                    int id = Integer.parseInt(parts[0]);\n                    int userId = Integer.parseInt(parts[1]);\n                    String title = parts[2];\n                    String content = parts[3];\n                    LocalDateTime createdAt = LocalDateTime.parse(parts[4]);\n                    LocalDateTime updatedAt = LocalDateTime.parse(parts[5]);\n                    int upvotes = Integer.parseInt(parts[6]);\n                    int downvotes = Integer.parseInt(parts[7]);\n\n                    ForumPost post = new ForumPost(userId, title, content);\n                    post.setId(id); // Use the standard ID setter\n                    post.setCreatedAt(createdAt);\n                    post.setUpdatedAt(updatedAt);\n                    post.setUpvotes(upvotes);\n                    post.setDownvotes(downvotes);\n\n                    // Update the next ID counter to avoid conflicts\n                    if (id >= nextForumPostId) {\n                        nextForumPostId = id + 1;\n                    }\n\n                    forumPosts.add(post);\n                }\n            }\n        } catch (IOException e) {\n            throw new FileParsingException(\"Error loading forum posts: \" + e.getMessage());\n        }\n    }\n\n    public void saveForumPosts(String filename) {\n        try (java.io.PrintWriter writer = new java.io.PrintWriter(\"src/main/resources/data/\" + filename)) {\n            synchronized (forumPostLock) {\n                for (ForumPost post : forumPosts) {\n                    writer.println(String.format(\"%d,%d,\\\"%s\\\",\\\"%s\\\",%s,%s,%d,%d\",\n                            post.getId(),\n                            post.getUserId(),\n                            escapeCsv(post.getTitle()),\n                            escapeCsv(post.getContent()),\n                            post.getCreatedAt(),\n                            post.getUpdatedAt(),\n                            post.getUpvotes(),\n                            post.getDownvotes()));\n                }\n            }\n            logger.info(\"Successfully saved {} forum posts to {}\", forumPosts.size(), filename);\n        } catch (IOException e) {\n            logger.error(\"Error saving forum posts to {}: {}\", filename, e.getMessage(), e);\n            throw new FileParsingException(\"Error saving forum posts: \" + e.getMessage());\n        }\n    }\n\n    private String escapeCsv(String input) {\n        if (input == null) {\n            return \"\";\n        }\n        return input.replace(\"\\\"\", \"\\\"\\\"\");\n    }\n\n    /**\n     * Adds a new user to the system in a thread-safe manner.\n     * @param user The user to add\n     * @throws DuplicateUsernameException if a user with the same username already exists\n     */\n    public void addUser(User user) {\n        if (user == null) {\n            logger.warn(\"Attempted to add a null user\");\n            return;\n        }\n\n        userLock.writeLock().lock();\n        try {\n            // Check if the username already exists\n            if (users.stream().anyMatch(u -> u.getUsername().equals(user.getUsername()))) {\n                throw new DuplicateUsernameException(\"Username already exists: \" + user.getUsername());\n            }\n            user.setId(nextUserId.getAndIncrement());\n            users.add(user);\n            logger.info(\"Added new user: {}\", user.getUsername());\n        } finally {\n            userLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Adds a new actor to the system in a thread-safe manner.\n     * @param actor The actor to add\n     */\n    public void addActor(Actor actor) {\n        if (actor == null) {\n            logger.warn(\"Attempted to add a null actor\");\n            return;\n        }\n        \n        actorLock.writeLock().lock();\n        try {\n            actor.setId(nextActorId.getAndIncrement());\n            actors.add(actor);\n            logger.debug(\"Added new actor: {}\", actor.getFullName());\n        } finally {\n            actorLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Adds a new director to the system in a thread-safe manner.\n     * @param director The director to add\n     */\n    public void addDirector(Director director) {\n        if (director == null) {\n            logger.warn(\"Attempted to add a null director\");\n            return;\n        }\n        \n        directorLock.writeLock().lock();\n        try {\n            director.setId(nextDirectorId.getAndIncrement());\n            directors.add(director);\n            logger.debug(\"Added new director: {}\", director.getFullName());\n        } finally {\n            directorLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Adds a new movie to the system in a thread-safe manner.\n     * @param movie The movie to add\n     * @throws DuplicateContentException if a movie with the same title already exists\n     */\n    public void addMovie(Movie movie) {\n        if (movie == null) {\n            logger.warn(\"Attempted to add a null movie\");\n            return;\n        }\n        \n        movieLock.writeLock().lock();\n        try {\n            if (findMovieByTitle(movie.getTitle()) != null) {\n                throw new DuplicateContentException(\"Movie already exists: \" + movie.getTitle());\n            }\n            movie.setId(nextMovieId.getAndIncrement());\n            movies.add(movie);\n            logger.info(\"Added new movie: {}\", movie.getTitle());\n        } finally {\n            movieLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Adds a new series to the system in a thread-safe manner.\n     * @param series The series to add\n     * @throws DuplicateContentException if a series with the same title already exists\n     */\n    public void addSeries(Series series) {\n        if (series == null) {\n            logger.warn(\"Attempted to add a null series\");\n            return;\n        }\n        \n        seriesLock.writeLock().lock();\n        try {\n            if (findSeriesByTitle(series.getTitle()) != null) {\n                throw new DuplicateContentException(\"Series already exists: \" + series.getTitle());\n            }\n            series.setId(nextSeriesId.getAndIncrement());\n            this.series.add(series);\n            logger.info(\"Added new series: {}\", series.getTitle());\n        } finally {\n            seriesLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Removes a movie from the system in a thread-safe manner.\n     * @param movie The movie to remove\n     * @throws IllegalArgumentException if the movie is null or not found\n     */\n    public void removeMovie(Movie movie) {\n        if (movie == null) {\n            throw new IllegalArgumentException(\"Movie cannot be null\");\n        }\n        \n        movieLock.writeLock().lock();\n        try {\n            boolean removed = movies.remove(movie);\n            if (!removed) {\n                throw new IllegalArgumentException(\"Movie not found in collection: \" + movie.getTitle());\n            }\n            logger.info(\"Removed movie: {}\", movie.getTitle());\n        } finally {\n            movieLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Removes a series from the system in a thread-safe manner.\n     * @param series The series to remove\n     * @throws IllegalArgumentException if the series is null or not found\n     */\n    public void removeSeries(Series series) {\n        if (series == null) {\n            throw new IllegalArgumentException(\"Series cannot be null\");\n        }\n        \n        seriesLock.writeLock().lock();\n        try {\n            boolean removed = this.series.remove(series);\n            if (!removed) {\n                throw new IllegalArgumentException(\"Series not found in collection: \" + series.getTitle());\n            }\n            logger.info(\"Removed series: {}\", series.getTitle());\n        } finally {\n            seriesLock.writeLock().unlock();\n        }\n    }\n\n    /**\n     * Retrieves a user by username in a thread-safe manner.\n     * @param username The username to search for\n     * @return The User object if found, null otherwise\n     */\n    public User getUserByUsername(String username) {\n        if (username == null || username.trim().isEmpty()) {\n            logger.warn(\"Attempted to search for user with null or empty username\");\n            return null;\n        }\n        \n        userLock.readLock().lock();\n        try {\n            return users.stream()\n                    .filter(user -> user.getUsername().equals(username))\n                    .findFirst()\n                    .orElse(null);\n        } finally {\n            userLock.readLock().unlock();\n        }\n    }\n\n    /**\n     * Finds an actor by their full name in a thread-safe manner.\n     * @param name The full name of the actor to find\n     * @return The Actor object if found, null otherwise\n     */\n    public Actor findActorByName(String name) {\n        if (name == null || name.trim().isEmpty()) {\n            logger.warn(\"Attempted to find actor with null or empty name\");\n            return null;\n        }\n        \n        actorLock.readLock().lock();\n        try {\n            return actors.stream()\n                    .filter(actor -> actor.getFullName().equals(name))\n                    .findFirst()\n                    .orElse(null);\n        } finally {\n            actorLock.readLock().unlock();\n        }\n    }\n\n    public Director findDirectorByName(String name) {\n        return directors.stream()\n                .filter(director -> director.getFullName().equals(name))\n                .findFirst()\n                .orElse(null);\n    }\n\n    public Movie findMovieByTitle(String title) {\n        movieLock.readLock().lock();\n        try {\n            return movies.stream()\n                    .filter(movie -> movie.getTitle().equals(title))\n                    .findFirst()\n                    .orElse(null);\n        } finally {\n            movieLock.readLock().unlock();\n        }\n    }\n\n    /**\n     * Finds a series by its title in a thread-safe manner.\n     * @param title The title of the series to find\n     * @return The Series object if found, null otherwise\n     */\n    public Series findSeriesByTitle(String title) {\n    seriesLock.readLock().lock();\n    try {\n        return series.stream()\n                .filter(series -> series.getTitle().equals(title))\n                .findFirst()\n                .orElse(null);\n    } finally {\n        seriesLock.readLock().unlock();\n    }\n}\n\n/**\n * Finds a user by their ID in a thread-safe manner.\n * @param id The ID of the user to find\n * @return The User object if found, null otherwise\n */\npublic User findUserById(int id) {\n    userLock.readLock().lock();\n    try {\n        return users.stream()\n                .filter(user -> user.getId() == id)\n                .findFirst()\n                .orElse(null);\n    } finally {\n        userLock.readLock().unlock();\n    }\n}\n\n/**\n * Finds an actor by their full name in a thread-safe manner.\n * @param name The full name of the actor to find\n * @return The Actor object if found, null otherwise\n */\npublic Actor findActorByName(String name) {\n    actorLock.readLock().lock();\n    try {\n        return actors.stream()\n                .filter(actor -> actor.getFullName().equals(name))\n                .findFirst()\n                .orElse(null);\n    } finally {\n        actorLock.readLock().unlock();\n    }\n}\n\n/**\n * Finds a director by their full name in a thread-safe manner.\n * @param name The full name of the director to find\n * @return The Director object if found, null otherwise\n */\npublic Director findDirectorByName(String name) {\n    directorLock.readLock().lock();\n    try {\n        return directors.stream()\n                .filter(director -> director.getFullName().equals(name))\n                .findFirst()\n                .orElse(null);\n    } finally {\n        directorLock.readLock().unlock();\n    }\n}\n\n/**\n * Retrieves a user by username in a thread-safe manner.\n * @param username The username to search for\n * @return The User object if found, null otherwise\n */\npublic User getUserByUsername(String username) {\n    userLock.readLock().lock();\n    try {\n        return users.stream()\n                .filter(user -> user.getUsername().equals(username))\n                .findFirst()\n                .orElse(null);\n    } finally {\n        userLock.readLock().unlock();\n    }\n}\n\n/**\n * Returns a thread-safe copy of all users.\n * @return A new list containing all users\n */\npublic List<User> getUsers() {\n    userLock.readLock().lock();\n    try {\n        return new ArrayList<>(users);\n    } finally {\n        userLock.readLock().unlock();\n    }\n}\n\n/**\n * Returns a thread-safe copy of all actors.\n * @return A new list containing all actors\n */\npublic List<Actor> getActors() {\n    actorLock.readLock().lock();\n    try {\n        return new ArrayList<>(actors);\n    } finally {\n        actorLock.readLock().unlock();\n    }\n}\n\n/**\n * Returns a thread-safe copy of all directors.\n * @return A new list containing all directors\n */\npublic List<Director> getDirectors() {\n    directorLock.readLock().lock();\n    try {\n        return new ArrayList<>(directors);\n    } finally {\n        directorLock.readLock().unlock();\n    }\n}\n\n/**\n * Returns a thread-safe copy of all movies.\n * @return A new list containing all movies\n */\npublic List<Movie> getMovies() {\n    movieLock.readLock().lock();\n    try {\n        return new ArrayList<>(movies);\n    } finally {\n        movieLock.readLock().unlock();\n    }\n}\n\n/**\n * Returns a thread-safe copy of all series.\n * @return A new list containing all series\n */\npublic List<Series> getSeries() {\n    seriesLock.readLock().lock();\n    try {\n        return new ArrayList<>(series);\n    } finally {\n        seriesLock.readLock().unlock();\n    }\n}\n\n/**\n * Returns a thread-safe copy of all forum posts.\n * @return A new list containing all forum posts\n */\npublic List<ForumPost> getAllForumPosts() {\n    forumPostLock.readLock().lock();\n    try {\n        return new ArrayList<>(forumPosts);\n    } finally {\n        forumPostLock.readLock().unlock();\n    }\n}\n\n/**\n * Finds a forum post by its ID in a thread-safe manner.\n * @param id The ID of the forum post to find\n * @return The ForumPost object if found, null otherwise\n */\npublic ForumPost findForumPostById(int id) {\n    forumPostLock.readLock().lock();\n    try {\n        return forumPosts.stream()\n                .filter(post -> post.getId() == id)\n                .findFirst()\n                .orElse(null);\n    } finally {\n        forumPostLock.readLock().unlock();\n    }\n}\n\npublic void upvoteForumPost(int postId, int userId) {\n    if (postId <= 0 || userId <= 0) {\n        throw new IllegalArgumentException(\"Invalid post ID or user ID\");\n    }\n    \n    synchronized (forumPostLock) {\n        ForumPost post = findForumPostById(postId);\n        if (post != null) {\n            post.upvote(userId);\n            logger.debug(\"User {} upvoted forum post {}\", userId, postId);\n        }\n    }\n}\n\npublic int getNextSeasonId() {\n    return nextSeasonId.get();\n}\n\npublic void setNextSeasonId(int nextSeasonId) {\n    this.nextSeasonId.set(nextSeasonId);\n}\n\npublic int getNextEpisodeId() {\n    return nextEpisodeId.get();\n}\n\npublic void setNextEpisodeId(int nextEpisodeId) {\n    this.nextEpisodeId.set(nextEpisodeId);\n}\n\npublic List<Movie> searchMovies(SearchCriteria criteria) {\n        List<Movie> result = movies.stream()\n                .filter(movie -> matchesCriteria(movie, criteria))\n                .toList();\n\n        // Convert to ArrayList since toList() returns an unmodifiable list\n        List<Movie> modifiableResult = new ArrayList<>(result);\n\n        // Apply sorting if criteria has sorting parameters\n        if (criteria.getSortBy() != null && !criteria.getSortBy().isEmpty()) {\n            sortMovies(modifiableResult, criteria);\n        }\n\n        return modifiableResult;\n    }\n\n\n    public void setAllMovies(List<Movie> newMovies) {\n        if (newMovies != null) {\n            this.movies.clear();\n            this.movies.addAll(newMovies);\n        }\n    }\n\n    public void rateMovie(Movie selected, double rating) {\n        if (rating < 0.0 || rating > 10.0) {\n            throw new IllegalArgumentException(\"Rating must be between 0.0 and 10.0\");\n        }\n\n        // Find the movie in our collection\n        Movie movie = findMovieByTitle(selected.getTitle());\n        if (movie != null) {\n            // For simplicity, we'll use a fixed user ID (1) for now\n            // In a real application, this would be the current user's ID\n            int userId = 1;\n            movie.addUserRating(userId, (int) Math.round(rating));\n        }\n    }\n\n\n    public void setAllSeries(List<Series> newSeries) {\n        if (newSeries != null) {\n            this.series.clear();\n            this.series.addAll(newSeries);\n        }\n    }\n\n\n    public List<ForumPost> getAllForumPosts() {\n        synchronized (forumPostLock) {\n            return new ArrayList<>(forumPosts);\n        }\n    }\n\n    public void addForumPost(ForumPost post) {\n        if (post == null) {\n            throw new IllegalArgumentException(\"Forum post cannot be null\");\n        }\n        if (post.getTitle() == null || post.getTitle().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Forum post title cannot be empty\");\n        }\n        if (post.getContent() == null || post.getContent().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Forum post content cannot be empty\");\n        }\n\n        synchronized (forumPostLock) {\n            // Ensure ID is not already in use\n            int newId = nextForumPostId.getAndIncrement();\n            while (findForumPostById(newId) != null) {\n                newId = nextForumPostId.getAndIncrement();\n            }\n            post.setId(newId);\n\n            // Set timestamps if not already set\n            if (post.getCreatedAt() == null) {\n                post.setCreatedAt(LocalDateTime.now());\n            }\n            if (post.getUpdatedAt() == null) {\n                post.setUpdatedAt(post.getCreatedAt());\n            }\n\n            forumPosts.add(post);\n            logger.debug(\"Added new forum post with ID: {}\", newId);\n        }\n    }\n\n    public boolean removeForumPost(ForumPost post) {\n        if (post == null) {\n            return false;\n        }\n        synchronized (forumPostLock) {\n            boolean removed = forumPosts.remove(post);\n            if (removed) {\n                logger.debug(\"Removed forum post with ID: {}\", post.getIdSanitized());\n            } else {\n                logger.warn(\"Attempted to remove non-existent forum post: {}\", post.getIdSanitized());\n            }\n            return removed;\n        }\n    }\n\n    public ForumPost findForumPostById(int id) {\n        if (id <= 0) {\n            return null;\n        }\n        synchronized (forumPostLock) {\n            return forumPosts.stream()\n                    .filter(post -> post.getId() == id)\n                    .findFirst()\n                    .orElse(null);\n        }\n    }\n\n    public void upvoteForumPost(int postId, int userId) {\n        if (postId <= 0 || userId <= 0) {\n            throw new IllegalArgumentException(\"Invalid post ID or user ID\");\n        }\n        synchronized (forumPostLock) {\n            ForumPost post = findForumPostById(postId);\n            if (post != null) {\n                post.upvote(userId);\n                post.setUpdatedAt(LocalDateTime.now());\n                logger.debug(\"User {} upvoted post {}\", userId, postId);\n            } else {\n                logger.warn(\"Attempted to upvote non-existent post: {}\", postId);\n            }\n        }\n    }\n\n    public void downvoteForumPost(int postId, int userId) {\n        if (postId <= 0 || userId <= 0) {\n            throw new IllegalArgumentException(\"Invalid post ID or user ID\");\n        }\n        synchronized (forumPostLock) {\n            ForumPost post = findForumPostById(postId);\n            if (post != null) {\n                post.downvote(userId);\n                post.setUpdatedAt(LocalDateTime.now());\n                logger.debug(\"User {} downvoted post {}\", userId, postId);\n            } else {\n                logger.warn(\"Attempted to downvote non-existent post: {}\", postId);\n            }\n        }\n    }\n\n    /**\n     * Parses a CSV line handling quoted fields properly\n     *\n     * @param line the CSV line to parse\n     * @return array of parsed fields\n     */\n    private String[] parseCSVLine(String line) {\n        List<String> fields = new ArrayList<>();\n        StringBuilder currentField = new StringBuilder();\n        boolean inQuotes = false;\n\n        for (int i = 0; i < line.length(); i++) {\n            char c = line.charAt(i);\n\n            if (c == '\"') {\n                inQuotes = !inQuotes;\n                currentField.append(c); // Keep the quotes for now, we'll remove them later\n            } else if (c == ',' && !inQuotes) {\n                fields.add(currentField.toString().trim());\n                currentField = new StringBuilder();\n            } else {\n                currentField.append(c);\n            }\n        }\n\n        // Add the last field\n        fields.add(currentField.toString().trim());\n\n        return fields.toArray(new String[0]);\n    }\n\n    /**\n     * @deprecated Use getUsers() instead. This method is kept for backward compatibility.\n     * @return A new list containing all users\n     */\n    @Deprecated\n    public List<User> getAllUsers() {\n        return getUsers();\n    }\n\n    /**\n     * @deprecated Use getActors() instead. This method is kept for backward compatibility.\n     * @return A new list containing all actors\n     */\n    @Deprecated\n    public List<Actor> getAllActors() {\n        return getActors();\n    }\n\n    /**\n     * @deprecated Use getDirectors() instead. This method is kept for backward compatibility.\n     * @return A new list containing all directors\n     */\n    @Deprecated\n    public List<Director> getAllDirectors() {\n        return getDirectors();\n    }\n\n    /**\n     * @deprecated Use getMovies() instead. This method is kept for backward compatibility.\n     * @return A new list containing all movies\n     */\n    @Deprecated\n    public List<Movie> getAllMovies() {\n        return getMovies();\n    }\n\n    /**\n     * @deprecated Use getSeries() instead. This method is kept for backward compatibility.\n     * @return A new list containing all series\n     */\n    @Deprecated\n    public List<Series> getAllSeries() {\n        return getSeries();\n    }\n\n}\n",
                    "language": "java"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1754629442507,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "command",
                                "attrs": {
                                    "label": "fix"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "fix: "
                                    }
                                ]
                            },
                            {
                                "type": "codeBlock",
                                "attrs": {
                                    "language": "java"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "Director director = findDirectorByName(parts[4]);"
                                    }
                                ]
                            },
                            {
                                "type": "text",
                                "text": "Ambiguous method call: both 'DataManager.findDirectorByName(String)' and 'DataManager.findDirectorByName(String)' match"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": [
                {
                    "name": "Repository Information Overview",
                    "description": "Repository Information Overview",
                    "uri": "zen-rules://repo/repo",
                    "mimeType": "text/markdown",
                    "content": "--\r\n\r\n# IMDB Clone Information\r\n\r\n## Summary\r\nA JavaFX-based application that simulates an IMDB-like movie and TV series database. The application allows users to browse, search, and rate movies and TV series.\r\n\r\n## Structure\r\n- `src/main/java`: Contains all Java source code\r\n- `src/main/resources`: Contains application resources including data files\r\n- `src/test`: Contains test files\r\n- `.mvn`: Maven wrapper files\r\n\r\n## Language & Runtime\r\n**Language**: Java\r\n**Version**: Java 21\r\n**Build System**: Maven\r\n**Package Manager**: Maven\r\n\r\n## Dependencies\r\n**Main Dependencies**:\r\n- JavaFX (21.0.3): Controls, FXML, Graphics, Media, Web modules\r\n- ControlsFX (11.2.1): Additional JavaFX controls\r\n\r\n**Development Dependencies**:\r\n- JUnit Jupiter (5.10.2): Testing framework\r\n\r\n## Build & Installation\r\n```bash\r\nmvn clean install\r\nmvn javafx:run\r\n```\r\n\r\n## Project Structure\r\nThe application follows an MVC-like architecture:\r\n\r\n### Model\r\n- `model/Content.java`: Abstract base class for all media content\r\n- `model/Movie.java`: Represents a movie with title, year, genre, etc.\r\n- `model/Series.java`: Represents a TV series with seasons and episodes\r\n- `model/Actor.java`, `model/Director.java`: Represent people involved in productions\r\n- `model/User.java`: Represents application users\r\n\r\n### Data Management\r\n- `data/DataManager.java`: Central class for data loading and management\r\n- `data/SearchCriteria.java`: Used for filtering content in searches\r\n\r\n### View/Controller\r\n- `gui/MovieManagementGUI.java`: Main JavaFX application UI\r\n\r\n### Enums & Exceptions\r\n- `enums/Genre.java`: Enumeration of content genres\r\n- Various exception classes for error handling\r\n\r\n## Issues Fixed\r\n1. Fixed parameter mismatch in Content constructor\r\n2. Implemented Movie constructors to match usage in DataManager\r\n3. Fixed DataManager's loadMovies method\r\n4. Implemented searchMovies method that was returning null\r\n5. Fixed getAllMovies and getAllSeries methods\r\n6. Implemented rateMovie functionality\r\n7. Created missing data directory and sample data files\r\n8. Updated module-info.java with required exports\r\n9. Created main application class\r\n10. Fixed pom.xml configuration",
                    "alwaysApply": true
                }
            ]
        },
        {
            "id": "2da52ec4-0d1d-4903-8a09-d1332762da0e",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I can see the issue in the DataManager class. The error message indicates there are two methods with the same signature `findDirectorByName(String)`, which is causing an ambiguous method call. Let me first examine the full file to understand the problem better."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01C3wPMHb3hzoxF9EZaFWS1D",
                    "statusText": "Viewed file (lines 1:400)",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "src/main/java/com/papel/imdb_clone/data/DataManager.java",
                                "fsPath": "C:/Users/mas_b/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/data/DataManager.java"
                            }
                        ]
                    },
                    "isHidden": false
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "b54c8393-63ef-4bee-83a4-f3d58b097e85"
            },
            "createdAt": 1754629445668,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "isQnaAgent": false,
    "isRepoInfoAgent": false
}
}