{
    "checksum": "5e1f44f914a1fed26d44c3e26f8850863d4afa37f0f4390d6d6d57e9fa9dbdf9",
    "data": {
    "id": "cbb59727-1abc-439e-8f80-c438df55f5df",
    "createdAt": 1754056192462,
    "updatedAt": 1754056192493,
    "title": " Generate tests for refreshSeriesTree method",
    "messages": [
        {
            "id": "b0722e4a-eca5-4b0f-a1eb-74fb980061a4",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": " Generate tests for refreshSeriesTree method"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\mas_b\\IdeaProjects\\imdb_clone\\src\\main\\java\\com\\papel\\imdb_clone\\gui\\MovieManagementGUI.java",
                    "fsPath": "C:/Users/mas_b/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/gui/MovieManagementGUI.java",
                    "content": "package com.papel.imdb_clone.gui;\n\nimport com.papel.imdb_clone.data.DataManager;\nimport com.papel.imdb_clone.data.SearchCriteria;\nimport com.papel.imdb_clone.model.Movie;\nimport com.papel.imdb_clone.model.Series;\nimport javafx.application.Application;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Insets;\nimport javafx.scene.Node;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.ButtonBar.ButtonData;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class MovieManagementGUI extends Application {\n    private final DataManager dataManager;\n    private Stage primaryStage;\n    private Scene mainScene;\n    private Tab moviesTab;\n    private Tab seriesTab;\n    private Tab addContentTab;\n    private Tab searchTab;\n    private TableView<Movie> movieTable;\n    private TreeView<String> seriesTree;\n\n    public MovieManagementGUI() {\n        this.dataManager = new DataManager();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        try {\n            this.primaryStage = primaryStage;\n            primaryStage.setTitle(\"IMDB Clone\");\n\n            // Load FXML\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/fxml/main.fxml\"));\n            loader.setController(this);\n            Parent root = loader.load();\n\n            // Apply CSS\n            Scene scene = new Scene(root, 800, 600);\n            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource(\"/css/styles.css\")).toExternalForm());\n\n            dataManager.loadAllData();\n\n            // Initialize data in tables/trees\n            refreshMovieTable();\n            refreshSeriesTree();\n\n            primaryStage.setScene(scene);\n            primaryStage.show();\n            \n        } catch (IOException e) {\n            showAlert(\"Error\", \"Failed to load application: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void initializeComponents() {\n        TabPane tabPane = new TabPane();\n\n        setupMoviesTab();\n        setupSeriesTab();\n        setupAddContentTab();\n        setupSearchTab();\n\n        tabPane.getTabs().addAll(moviesTab, seriesTab, addContentTab, searchTab);\n\n        VBox root = new VBox(tabPane);\n\n        mainScene = new Scene(root, 800, 600);\n    }\n\n    private void setupMoviesTab() {\n        moviesTab = new Tab(\"Movies\");\n        moviesTab.setClosable(false);\n\n        movieTable = new TableView<>();\n\n        TableColumn<Movie, String> titleColumn = new TableColumn<>(\"Title\");\n        titleColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTitle()));\n        titleColumn.setPrefWidth(180);\n\n        TableColumn<Movie, String> yearColumn = new TableColumn<>(\"Year\");\n        yearColumn.setCellValueFactory(data ->\n                new SimpleStringProperty(String.valueOf(data.getValue().getYear().getYear() + 1900))\n        );\n        yearColumn.setPrefWidth(80);\n\n        TableColumn<Movie, String> genreColumn = new TableColumn<>(\"Genre\");\n        genreColumn.setCellValueFactory(data ->\n                new SimpleStringProperty(data.getValue().getGenre().toString())\n        );\n        genreColumn.setPrefWidth(100);\n\n        TableColumn<Movie, String> directorColumn = new TableColumn<>(\"Director\");\n        directorColumn.setCellValueFactory(data ->\n                new SimpleStringProperty(\n                        data.getValue().getDirector() != null\n                                ? data.getValue().getDirector()\n                                : \"Unknown\"\n                )\n        );\n        directorColumn.setPrefWidth(150);\n\n        TableColumn<Movie, String> imdbColumn = new TableColumn<>(\"IMDB Rating\");\n        imdbColumn.setCellValueFactory(data ->\n                new SimpleStringProperty(String.format(\"%.1f\", data.getValue().getImdbRating()))\n        );\n        imdbColumn.setPrefWidth(100);\n\n        movieTable.getColumns().addAll(\n                titleColumn, yearColumn, genreColumn, directorColumn, imdbColumn\n        );\n\n        Button addMovieBtn = new Button(\"Add Movie\");\n        addMovieBtn.setOnAction(e -> showAddMovieDialog());\n\n        Button rateMovieBtn = new Button(\"Rate Movie\");\n        rateMovieBtn.setOnAction(e -> {\n            Movie selected = movieTable.getSelectionModel().getSelectedItem();\n            if (selected != null) {\n                showRatingDialog(selected);\n            } else {\n                showAlert(\"No Selection\", \"Please select a movie to rate.\");\n            }\n        });\n\n        HBox buttonBox = new HBox(10, addMovieBtn, rateMovieBtn);\n        buttonBox.setPadding(new Insets(10));\n\n        VBox movieLayout = new VBox(10, movieTable, buttonBox);\n        movieLayout.setPadding(new Insets(10));\n\n        moviesTab.setContent(movieLayout);\n        refreshMovieTable();\n    }\n\n    private void refreshMovieTable() {\n        List<Movie> movies = dataManager.getAllMovies();\n        ObservableList<Movie> items = FXCollections.observableArrayList(movies);\n        movieTable.setItems(items);\n    }\n\n    private void showRatingDialog(Movie selected) {\n        TextInputDialog dialog = new TextInputDialog();\n        dialog.initOwner(primaryStage);\n        dialog.setTitle(\"Rate Movie\");\n        dialog.setHeaderText(\"Rate: \" + selected.getTitle());\n        dialog.setContentText(\"Enter your rating (0.0 - 10.0):\");\n\n        Optional<String> result = dialog.showAndWait();\n        result.ifPresent(input -> {\n            try {\n                double rating = Double.parseDouble(input.trim());\n                dataManager.rateMovie(selected, rating);\n                refreshMovieTable();\n            } catch (NumberFormatException ex) {\n                showAlert(\"Invalid Input\", \"Please enter a valid decimal number.\");\n            }\n        });\n    }\n\n    private void showAddMovieDialog() {\n        Dialog<Movie> dialog = new Dialog<>();\n        dialog.initOwner(primaryStage);\n        dialog.setTitle(\"Add Movie\");\n        dialog.setHeaderText(\"Enter new movie details\");\n\n        ButtonType addBtnType = new ButtonType(\"Add\", ButtonData.OK_DONE);\n        dialog.getDialogPane().getButtonTypes().addAll(addBtnType, ButtonType.CANCEL);\n\n        GridPane grid = new GridPane();\n        grid.setHgap(10);\n        grid.setVgap(10);\n        grid.setPadding(new Insets(20, 150, 10, 10));\n\n        TextField titleField = new TextField();\n        TextField yearField = new TextField();\n        TextField genreField = new TextField();\n        TextField directorField = new TextField();\n\n        titleField.setPromptText(\"Title\");\n        yearField.setPromptText(\"Year\");\n        genreField.setPromptText(\"Genre\");\n        directorField.setPromptText(\"Director\");\n\n        grid.add(new Label(\"Title:\"), 0, 0);\n        grid.add(titleField, 1, 0);\n        grid.add(new Label(\"Year:\"), 0, 1);\n        grid.add(yearField, 1, 1);\n        grid.add(new Label(\"Genre:\"), 0, 2);\n        grid.add(genreField, 1, 2);\n        grid.add(new Label(\"Director:\"), 0, 3);\n        grid.add(directorField, 1, 3);\n\n        // disable Add button until the title is filled\n        Node addButton = dialog.getDialogPane().lookupButton(addBtnType);\n        addButton.setDisable(true);\n        titleField.textProperty().addListener((o, oldVal, newVal) ->\n                addButton.setDisable(newVal.trim().isEmpty())\n        );\n\n        dialog.getDialogPane().setContent(grid);\n\n        dialog.setResultConverter(btn -> {\n            if (btn == addBtnType) {\n                try {\n                    String title = titleField.getText().trim();\n                    int year = Integer.parseInt(yearField.getText().trim());\n                    String genre = genreField.getText().trim();\n                    String director = directorField.getText().trim();\n\n                    // Movie constructor: (String title, int year, String genre, String directorName)\n                    Map<Integer, Integer> userRatings = Map.of();\n                    Movie movie = new Movie(title, year, genre, director, userRatings);\n                    return movie;\n\n                } catch (NumberFormatException e) {\n                    showAlert(\"Invalid Input\", \"Year must be an integer.\");\n                }\n            }\n            return null;\n        });\n\n        Optional<Movie> result = dialog.showAndWait();\n        result.ifPresent(movie -> {\n            dataManager.addMovie(movie);\n            refreshMovieTable();\n        });\n    }\n\n    private void setupSeriesTab() {\n        seriesTab = new Tab(\"Series\");\n        seriesTab.setClosable(false);\n\n        seriesTree = new TreeView<>();\n        TreeItem<String> root = new TreeItem<>(\"Series\");\n        seriesTree.setRoot(root);\n\n        Button addSeriesBtn = new Button(\"Add Series\");\n        addSeriesBtn.setOnAction(e -> showAddSeriesDialog());\n\n        HBox buttonBox = new HBox(10, addSeriesBtn);\n        buttonBox.setPadding(new Insets(10));\n\n        VBox seriesLayout = new VBox(10, seriesTree, buttonBox);\n        seriesLayout.setPadding(new Insets(10));\n\n        seriesTab.setContent(seriesLayout);\n        refreshSeriesTree();\n    }\n\n    private void refreshSeriesTree() {\n        TreeItem<String> root = seriesTree.getRoot();\n        root.getChildren().clear();\n\n        List<Series> allSeries = dataManager.getAllSeries();\n        for (Series s : allSeries) {\n            TreeItem<String> seriesNode = new TreeItem<>(s.getTitle());\n            root.getChildren().add(seriesNode);\n        }\n        root.setExpanded(true);\n    }\n\n    private void showAddSeriesDialog() {\n        TextInputDialog dialog = new TextInputDialog();\n        dialog.initOwner(primaryStage);\n        dialog.setTitle(\"Add Series\");\n        dialog.setHeaderText(\"Enter series title:\");\n        dialog.setContentText(\"Title:\");\n\n        Optional<String> result = dialog.showAndWait();\n        result.ifPresent(name -> {\n            Series newSeries = new Series(name.trim());\n            dataManager.addSeries(newSeries);\n            refreshSeriesTree();\n        });\n    }\n\n    private void setupAddContentTab() {\n        addContentTab = new Tab(\"Add Content\");\n        addContentTab.setClosable(false);\n\n        VBox layout = new VBox(20);\n        layout.setPadding(new Insets(20));\n\n        Label titleLabel = new Label(\"Add New Content\");\n        titleLabel.setStyle(\"-fx-font-size: 18px; -fx-font-weight: bold;\");\n\n        Button addMovieBtn = new Button(\"Add New Movie\");\n        addMovieBtn.setPrefWidth(200);\n        addMovieBtn.setOnAction(e -> showAddMovieDialog());\n\n        Button addSeriesBtn = new Button(\"Add New Series\");\n        addSeriesBtn.setPrefWidth(200);\n        addSeriesBtn.setOnAction(e -> showAddSeriesDialog());\n\n        layout.getChildren().addAll(titleLabel, addMovieBtn, addSeriesBtn);\n        addContentTab.setContent(layout);\n    }\n\n    private void setupSearchTab() {\n        searchTab = new Tab(\"Search\");\n        searchTab.setClosable(false);\n\n        VBox layout = new VBox(15);\n        layout.setPadding(new Insets(15));\n\n        GridPane searchGrid = new GridPane();\n        searchGrid.setHgap(10);\n        searchGrid.setVgap(10);\n\n        TextField titleField = new TextField();\n        TextField actorField = new TextField();\n        TextField directorField = new TextField();\n        TextField minImdbField = new TextField();\n        TextField minUserField = new TextField();\n\n        searchGrid.add(new Label(\"Title:\"), 0, 0);\n        searchGrid.add(titleField, 1, 0);\n        searchGrid.add(new Label(\"Actor:\"), 0, 1);\n        searchGrid.add(actorField, 1, 1);\n        searchGrid.add(new Label(\"Director:\"), 0, 2);\n        searchGrid.add(directorField, 1, 2);\n        searchGrid.add(new Label(\"Min IMDB Rating:\"), 0, 3);\n        searchGrid.add(minImdbField, 1, 3);\n        searchGrid.add(new Label(\"Min User Rating:\"), 0, 4);\n        searchGrid.add(minUserField, 1, 4);\n\n        Button searchBtn = new Button(\"Search\");\n        ListView<String> view = new ListView<>();\n\n        searchBtn.setOnAction(e -> {\n            SearchCriteria criteria = new SearchCriteria();\n\n            if (!titleField.getText().trim().isEmpty()) {\n                criteria.setTitle(titleField.getText().trim());\n            }\n            if (!actorField.getText().trim().isEmpty()) {\n                criteria.setActorName(actorField.getText().trim());\n            }\n            if (!directorField.getText().trim().isEmpty()) {\n                criteria.setDirectorName(directorField.getText().trim());\n            }\n            try {\n                if (!minImdbField.getText().trim().isEmpty()) {\n                    criteria.setMinImdbRating(\n                            Double.parseDouble(minImdbField.getText().trim())\n                    );\n                }\n                if (!minUserField.getText().trim().isEmpty()) {\n                    criteria.setMinUserRating(\n                            Double.parseDouble(minUserField.getText().trim())\n                    );\n                }\n            } catch (NumberFormatException ex) {\n                showAlert(\"Error\", \"Rating fields must be numeric.\");\n                return;\n            }\n\n            handleSearch(criteria, view);\n        });\n\n        layout.getChildren().addAll(\n                searchGrid,\n                searchBtn,\n                new Label(\"Results:\"),\n                view\n        );\n        searchTab.setContent(layout);\n    }\n\n    private void handleSearch(SearchCriteria criteria, ListView<String> resultsView) {\n        List<Movie> matches = dataManager.searchMovies(criteria);\n\n        List<String> display = matches.stream()\n                .map(m -> String.format(\n                        \"%s (%d) – IMDb: %.1f, User: %.1f\",\n                        m.getTitle(),\n                        m.getYear().getYear() + 1900,\n                        m.getImdbRating(),\n                        m.getUserRating() != null ? m.getUserRating() : 0.0\n                ))\n                .collect(Collectors.toList());\n\n        resultsView.setItems(FXCollections.observableArrayList(display));\n    }\n\n    private void showAlert(String title, String message) {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.initOwner(primaryStage);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n\n    public Stage getPrimaryStage() {\n        return primaryStage;\n    }\n\n    public void setPrimaryStage(Stage primaryStage) {\n        this.primaryStage = primaryStage;\n    }\n}\n",
                    "language": "java"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1754056192492,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": " Generate tests for refreshSeriesTree method"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": []
        }
    ],
    "isUnitTestsAgent": true
}
}