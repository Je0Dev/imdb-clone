{
    "checksum": "535a67b6fad83eeb8a4dee338419f6ddd6433e5a4c869bc2f22376a4637df418",
    "data": {
    "id": "5f3cc590-d2c6-423f-b98c-fdfa23867902",
    "createdAt": 1755091080333,
    "updatedAt": 1755091080342,
    "title": "/fix (AuthException.AuthErrorType.AUTHENTICATIO...",
    "messages": [
        {
            "id": "a125386c-d008-4f13-9e71-adef91b69b0f",
            "role": "user",
            "content": [
                {
                    "type": "command",
                    "commandName": "fix"
                },
                {
                    "type": "codeSnippet",
                    "text": "(AuthException.AuthErrorType.AUTHENTICATION_FAILED, \"Login failed: \" + e.getMessage())",
                    "language": "java"
                },
                {
                    "type": "text",
                    "text": "Cannot resolve symbol 'AUTHENTICATION_FAILED'"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "C:\\Users\\MA$\\IdeaProjects\\imdb_clone\\src\\main\\java\\com\\papel\\imdb_clone\\service\\validation\\UserService.java",
                    "fsPath": "C:/Users/MA$/IdeaProjects/imdb_clone/src/main/java/com/papel/imdb_clone/service/validation/UserService.java",
                    "content": "package com.papel.imdb_clone.service.validation;\n\nimport com.papel.imdb_clone.data.RefactoredDataManager;\nimport com.papel.imdb_clone.exceptions.AuthException;\nimport com.papel.imdb_clone.model.User;\nimport com.papel.imdb_clone.service.EncryptionService;\nimport com.papel.imdb_clone.service.UserStorageService;\nimport com.papel.imdb_clone.util.AppEventBus;\nimport com.papel.imdb_clone.util.AppStateManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Unified service for user management, authentication, and session handling.\n * Combines functionality from UserService and AuthService.\n */\npublic class UserService {\n    private static final Logger logger = LoggerFactory.getLogger(UserService.class);\n    private static UserService instance;\n\n    // User storage\n    private final Map<String, User> activeSessions = new ConcurrentHashMap<>();\n    private final RefactoredDataManager dataManager;\n    private final EncryptionService encryptionService;\n    private final UserStorageService userStorageService;\n\n    // Current session\n    private User currentUser;\n\n    private UserService(RefactoredDataManager dataManager) {\n        this.dataManager = dataManager;\n        this.encryptionService = EncryptionService.getInstance();\n        this.userStorageService = UserStorageService.getInstance();\n        logger.info(\"Initializing UserService...\");\n    }\n\n    public static synchronized UserService getInstance(RefactoredDataManager dataManager) {\n        if (instance == null) {\n            instance = new UserService(dataManager);\n        }\n        return instance;\n    }\n\n    /**\n     * Registers a new user with the given details and logs them in.\n     *\n     * @param firstName User's first name\n     * @param lastName  User's last name\n     * @param username  Unique username\n     * @param email     Valid email address\n     * @param password  Plain text password (will be hashed)\n     * @param gender    User's gender\n     * @return Session token for the registered user\n     * @throws AuthException if registration fails\n     */\n    public String registerAndLogin(String firstName, String lastName, String username,\n                                   String email, String password, char gender) throws AuthException {\n        try {\n            // Validate input\n            if (dataManager.findUserByUsername(username).isPresent()) {\n                throw new AuthException(AuthException.AuthErrorType.USERNAME_EXISTS, \"Username already exists\");\n            }\n\n            // Create and save user\n            User user = new User(firstName, lastName, username, gender, email);\n            String hashedPassword = encryptionService.hashPassword(password);\n            user.setPassword(hashedPassword);\n\n            // Save user using the repository pattern\n            dataManager.getUserRepository().save(user);\n\n            // Log the user in\n            return createSession(user);\n\n        } catch (Exception e) {\n            logger.error(\"Registration failed: {}\", e.getMessage(), e);\n            throw new AuthException(AuthException.AuthErrorType.REGISTRATION_FAILED, \"Registration failed: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Authenticates a user and creates a session.\n     *\n     * @param username Username or email\n     * @param password Plain text password\n     * @return Session token\n     * @throws AuthException if authentication fails\n     */\n    public String loginAndCreateSession(String username, String password) throws AuthException {\n        try {\n            // First try to find by username\n            Optional<User> userOpt = dataManager.findUserByUsername(username);\n\n            // If not found by username, try to find by email\n            if (userOpt.isEmpty()) {\n                userOpt = dataManager.findUserByEmail(username);\n            }\n\n            if (userOpt.isEmpty() || !encryptionService.verifyPassword(password, userOpt.get().getPassword())) {\n                throw new AuthException(AuthException.AuthErrorType.INVALID_CREDENTIALS, \"Invalid username/email or password\");\n            }\n\n            User user = userOpt.get();\n            return createSession(user);\n\n        } catch (Exception e) {\n            logger.error(\"Login failed: {}\", e.getMessage(), e);\n            throw new AuthException(AuthException.AuthErrorType.AUTHENTICATION_FAILED, \"Login failed: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Creates a new session for the user.\n     *\n     * @param user The user to create a session for\n     * @return Session token\n     */\n    private String createSession(User user) {\n        String token = UUID.randomUUID().toString();\n        activeSessions.put(token, user);\n        this.currentUser = user;\n\n        // Update application state\n        AppStateManager.getInstance().setCurrentUser(user);\n\n        // Publish login event\n        Map<String, Object> eventData = new HashMap<>();\n        eventData.put(\"user\", user);\n        eventData.put(\"sessionToken\", token);\n        AppEventBus.getInstance().publish(AppStateManager.EVT_USER_LOGGED_IN, eventData);\n\n        logger.info(\"Created session for user: {}\", user.getUsername());\n        return token;\n    }\n\n    /**\n     * Logs out the current user.\n     *\n     * @param token Session token\n     */\n    public void logout(String token) {\n        if (token != null) {\n            User user = activeSessions.remove(token);\n            if (user != null) {\n                logger.info(\"User logged out: {}\", user.getUsername());\n\n                // Clear application state\n                AppStateManager.getInstance().clearSession();\n\n                // Publish logout event\n                Map<String, Object> eventData = new HashMap<>();\n                eventData.put(\"user\", user);\n                AppEventBus.getInstance().publish(AppStateManager.EVT_USER_LOGGED_OUT, eventData);\n\n                if (user.equals(currentUser)) {\n                    currentUser = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * Validates a session token.\n     *\n     * @param token Session token to validate\n     * @return The user associated with the token, or null if invalid\n     */\n    public User validateSession(String token) {\n        if (token == null) return null;\n\n        // First check the application state\n        User currentUser = AppStateManager.getInstance().getCurrentUser();\n        if (currentUser != null) {\n            // If we have a current user in the app state, use that\n            return currentUser;\n        }\n\n        // Fall back to active sessions\n        return activeSessions.get(token);\n    }\n\n    // Getters and other user management methods...\n    public User getCurrentUser() {\n        // First check the application state\n        User stateUser = AppStateManager.getInstance().getCurrentUser();\n        if (stateUser != null) {\n            return stateUser;\n        }\n        return currentUser;\n    }\n\n    public boolean isAuthenticated() {\n        // Check both the service and app state for consistency\n        return getCurrentUser() != null;\n    }\n\n    /**\n     * Updates the current user's profile information.\n     *\n     * @param updatedUser The updated user object\n     * @return The updated user\n     * @throws IllegalArgumentException if the user is not found or not authenticated\n     */\n    /**\n     * Updates the current user's profile information.\n     *\n     * @param updatedUser The updated user object containing new profile information\n     * @return The updated user\n     * @throws IllegalArgumentException if the user is null or contains invalid data\n     * @throws IllegalStateException if the user is not authenticated or not authorized to update the profile\n     */\n    /**\n     * Updates the current user's profile information.\n     *\n     * @param updatedUser The updated user object containing new profile information\n     * @return The updated user\n     * @throws IllegalArgumentException if the user is null or contains invalid data\n     * @throws IllegalStateException if the user is not authenticated or not authorized to update the profile\n     */\n    public User updateUserProfile(User updatedUser) {\n        if (updatedUser == null) {\n            throw new IllegalArgumentException(\"User cannot be null\");\n        }\n\n        // Validate required fields\n        if (updatedUser.getUsername() == null || updatedUser.getUsername().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Username cannot be empty\");\n        }\n        if (updatedUser.getEmail() == null || updatedUser.getEmail().trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Email cannot be empty\");\n        }\n\n        User currentUser = getCurrentUser();\n        if (currentUser == null) {\n            throw new IllegalStateException(\"User not authenticated\");\n        }\n        \n        if (currentUser.getId() != updatedUser.getId()) {\n            throw new IllegalStateException(\"Not authorized to update this user's profile\");\n        }\n\n        try {\n            // Preserve sensitive data that shouldn't be updated through this method\n            updatedUser.setPassword(currentUser.getPassword());\n            \n            // Save the updated user using the repository\n            User savedUser = dataManager.getUserRepository().save(updatedUser);\n\n            // Update the current user in the app state and active sessions\n            this.currentUser = savedUser;\n            AppStateManager.getInstance().setCurrentUser(savedUser);\n            \n            // Update user in all active sessions\n            activeSessions.entrySet().stream()\n                .filter(entry -> entry.getValue().getId() == savedUser.getId())\n                .forEach(entry -> entry.setValue(savedUser));\n\n            // Publish profile updated event\n            Map<String, Object> eventData = new HashMap<>();\n            eventData.put(\"user\", savedUser);\n            AppEventBus.getInstance().publish(\"USER_PROFILE_UPDATED\", eventData);\n\n            logger.info(\"Successfully updated profile for user: {}\", savedUser.getUsername());\n            return savedUser;\n\n        } catch (Exception e) {\n            logger.error(\"Failed to update user profile: {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Failed to update user profile: \" + e.getMessage(), e);\n        }\n    }\n",
                    "language": "java"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1755091080342,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "command",
                                "attrs": {
                                    "label": "fix"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "fix: "
                                    }
                                ]
                            },
                            {
                                "type": "codeBlock",
                                "attrs": {
                                    "language": "java"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "(AuthException.AuthErrorType.AUTHENTICATION_FAILED, \"Login failed: \" + e.getMessage())"
                                    }
                                ]
                            },
                            {
                                "type": "text",
                                "text": "Cannot resolve symbol 'AUTHENTICATION_FAILED'"
                            }
                        ]
                    }
                ]
            },
            "autoAppliedRules": []
        }
    ],
    "isAgent": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "isQnaAgent": false,
    "isRepoInfoAgent": false
}
}